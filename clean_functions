#!/bin/bash

clean_components_controller()
{
# Remove the installed package
echo "removing packages..."
dnf remove -y chrony

# Restore the original configuration if saved
echo "restoring configs..."
orig="/etc/chrony.conf.bak"
restore_config

# Disable and stop the service
echo "stopping services..."
systemctl disable chronyd.service
systemctl stop chronyd.service

echo "### cleanup completed ###"
}

clean_components_node()
{


# Stop and disable chronyd service
echo "stopping services..."
systemctl stop chronyd.service
systemctl disable chronyd.service

# Restore the original configuration if a backup exists
echo "restoring configs..."
orig="/etc/chrony.conf"
restore_config

# Remove chrony if it was installed by the script

echo "### cleanup completed ###"
}

clean_mariadb_controller()
{

# Stop and disable MariaDB service
echo "stopping services..."
systemctl stop mariadb.service
systemctl disable mariadb.service

# Restore the original MariaDB configuration if a backup exists
echo "restoring configs..."
orig="/etc/my.cnf.d/openstack.cnf"
restore_config

# Remove MariaDB packages
echo "removing packages..."
dnf remove -y mariadb mariadb-server python3-PyMySQL

fi

echo "### cleanup completed ###"
}

clean_rabbitmq_controller()
{

# Stop and disable RabbitMQ service
echo "stopping services"
systemctl stop rabbitmq-server
systemctl disable rabbitmq-server

# Remove RabbitMQ packages
echo "removing packages..."
dnf remove -y rabbitmq-server

# Remove RabbitMQ user if it exists
echo "removing users..."
if rabbitmqctl list_users | grep -q openstack; then
    rabbitmqctl delete_user openstack
    echo "Removed RabbitMQ user 'openstack'..."
else
    echo "RabbitMQ user 'openstack' not found, skipping removal..."
fi

# Remove firewall rule
echo "removing firewall rules..."
firewall-cmd --remove-port=5672/tcp --permanent
firewall-cmd --reload

echo "### cleanup completed ###"
}

clean_memcached_controller()
{
# Stop and disable Memcached service
echo "stopping services..."
systemctl stop memcached
systemctl disable memcached

# Remove Memcached packages
echo "removing packages..."
dnf remove -y memcached python3-memcached

# Restore original Memcached config if backup exists
echo "restoring configs..."
orig="/etc/sysconfig/memcached"
restore_config

# Remove firewall rule for Memcached
echo "removing firewall rules..."
firewall-cmd --remove-port=11211/tcp --permanent
firewall-cmd --reload

echo "### cleanup completed ###"
}

clean_etcd_controller()
{

# stop and disable etcd service
echo "stopping services..."
systemctl stop etcd
systemctl disable etcd

# remove etcd package
echo "removing packages..."
dnf remove -y etcd


# remove firewall rules for etcd
echo "removing firewall rules..."
firewall-cmd --remove-port=2379/tcp --permanent
firewall-cmd --remove-port=2380/tcp --permanent
firewall-cmd --reload

echo "### undo script for etcd completed ###"
}

clean_keystone_controller()
{

# stop and disable httpd service
echo "stopping services..."
systemctl stop httpd
systemctl disable httpd

# remove keystone packages
echo "removing packages..."
dnf remove -y openstack-keystone httpd mod_wsgi

# restore original keystone config if backup exists
echo "restoring configs..."
orig="/etc/keystone/keystone.conf"
restore_config
orig="/etc/httpd/conf/httpd.conf"
restore_config
rm -f /etc/httpd/conf.d/wsgi-keystone.conf

# remove keystone database
echo "removing database..."
mysql -e "DROP DATABASE IF EXISTS keystone;"
mysql -e "DROP USER IF EXISTS 'keystone'@'localhost';"
mysql -e "DROP USER IF EXISTS 'keystone'@'%';"

# remove firewall rule
echo "removing firewall rules..."
firewall-cmd --remove-port=5000/tcp --permanent
firewall-cmd --reload

echo "### undo script for keystone completed ###"
}

clean_glance_controller()
{

# stop and disable glance service
echo "stopping services..."
systemctl stop openstack-glance-api
systemctl disable openstack-glance-api

# remove glance packages
echo "removing packages..."
dnf remove -y openstack-glance

# restore original glance config if backup exists
echo "restoring configs..."
orig="/etc/glance/glance-api.conf"
restore_config

# remove glance database
echo "removing database..."
mysql -e "DROP DATABASE IF EXISTS glance;"
mysql -e "DROP USER IF EXISTS 'glance'@'localhost';"
mysql -e "DROP USER IF EXISTS 'glance'@'%';"

# remove glance openstack services and roles
echo "reverting openstack config..."
srcopenrc
openstack user delete glance || true
openstack project delete service || true
openstack service delete image || true
openstack endpoint delete $(openstack endpoint list --service image -c ID -f value)

# remove firewall rule
echo "removing firewall rules..."
firewall-cmd --remove-port=9292/tcp --permanent
firewall-cmd --reload

echo "### undo script for glance completed ###"
}

clean_placement_controller()
{

# stop and disable httpd service
echo "stopping services..."
systemctl stop httpd
systemctl disable httpd

# remove placement packages
echo "removing packages..."
dnf remove -y openstack-placement-api python3-osc-placement

# restore original placement config if backup exists
echo "restoring configs..."
orig="/etc/placement/placement.conf"
restore_config
echo "restoring configs..."
orig="/etc/httpd/conf.d/00-placement-api.conf"
restore_config

# remove placement database
echo "removing database..."
mysql -e "DROP DATABASE IF EXISTS placement;"
mysql -e "DROP USER IF EXISTS 'placement'@'localhost';"
mysql -e "DROP USER IF EXISTS 'placement'@'%';"

# remove placement openstack services and roles
echo "reverting openstack config"
srcopenrc
openstack user delete placement || true
openstack service delete placement || true
openstack endpoint delete $(openstack endpoint list --service placement -c ID -f value) ||true

# remove firewall rule
echo "removing firewall rules..."
firewall-cmd --remove-port=8778/tcp --permanent
firewall-cmd --reload

echo "### undo script for placement completed ###"
}

clean_nova_controller()
{

# stop and disable nova services
echo "stopping services..."
systemctl stop openstack-nova-api.service openstack-nova-scheduler.service openstack-nova-conductor.service openstack-nova-novncproxy.service || true
systemctl disable openstack-nova-api.service openstack-nova-scheduler.service openstack-nova-conductor.service openstack-nova-novncproxy.service || true

# remove nova packages
echo "removing packages..."
dnf remove -y openstack-nova-api openstack-nova-conductor openstack-nova-novncproxy openstack-nova-scheduler

# restore original nova config if backup exists
echo "restoring configs..."
orig="/etc/nova/nova.conf"
restore_config

# remove nova databases
echo "removing database..."
mysql -e "DROP DATABASE IF EXISTS nova_api;"
mysql -e "DROP DATABASE IF EXISTS nova;"
mysql -e "DROP DATABASE IF EXISTS nova_cell0;"
mysql -e "DROP USER IF EXISTS 'nova'@'localhost';"
mysql -e "DROP USER IF EXISTS 'nova'@'%';"

# remove nova openstack services and roles
echo "reverting openstack config..."
srcopenrc
openstack user delete nova || true
openstack service delete nova || true
openstack endpoint delete $(openstack endpoint list --service nova -c ID -f value) || true

# remove firewall rule
echo "removing firewall rules..."
firewall-cmd --remove-port=8774/tcp --permanent
firewall-cmd --reload

echo "### undo script for nova completed ###"
}

clean_nova_compute_node()
{

# stop and disable nova compute services
echo "stopping services..."
systemctl stop libvirtd.service openstack-nova-compute.service || true
systemctl disable libvirtd.service openstack-nova-compute.service || true

# remove nova compute packages
echo "removing packages..."
dnf remove -y openstack-nova-compute libvirt-daemon

# restore original nova config if backup exists
echo "restoring configs..."
orig="/etc/nova/nova.conf"
restore_config

# remove vnc proxy firewall rule
echo "removing firewall rules"
firewall-cmd --remove-port=6080/tcp --permanent
firewall-cmd --reload

echo "### undo script for nova compute node completed ###"
}

clean_cinder_controller()
{

# stop and disable cinder services
echo "stopping services..."
systemctl stop openstack-cinder-api.service openstack-cinder-scheduler.service || true
systemctl disable openstack-cinder-api.service openstack-cinder-scheduler.service || true

# remove cinder packages
echo "removing packages..."
dnf remove -y openstack-cinder

# restore original cinder config if backup exists
echo "restoring configs..."
orig="/etc/cinder/cinder.conf"
restore_config
orig="/etc/nova/nova.conf"
restore_config

# remove database
echo "removing database..."
mysql -e "DROP DATABASE IF EXISTS cinder;"
mysql -e "DROP USER IF EXISTS 'cinder'@'localhost';"
mysql -e "DROP USER IF EXISTS 'cinder'@'%';"
echo "removed cinder database and users…"

# remove openstack user and service
echo "reverting openstack config..."
srcopenrc
openstack user delete cinder || true
openstack service delete volumev3 || true

# remove firewall rule
echo "removing firewall rules..."
firewall-cmd --remove-port=8776/tcp --permanent
firewall-cmd --reload

echo "### undo script for cinder controller completed ###"
}

clean_cinder_node()
{

# stop and disable cinder volume services
echo "stopping services..."
systemctl stop openstack-cinder-volume.service target.service || true
systemctl disable openstack-cinder-volume.service target.service || true

# remove cinder packages
echo "removing packages..."
dnf remove -y openstack-cinder targetcli

# restore original lvm config if backup exists
echo "restoring configs..."
orig="/etc/lvm/lvm.conf"
restore_config

# remove storage volume if exists
if vgdisplay cinder-volumes &>/dev/null; then
	    vgremove -f cinder-volumes
	        pvremove -f /dev/$cinderdev
		    echo "removed volume group and physical volume for cinder…"
	    else
		        echo "no cinder volume group found, skipping removal…"
fi

echo "### cleanup completed ###"
}

clean_cinder_backupnode()
{

}

clean_horizon()
{

# stop and disable services
echo "stopping services..."
systemctl stop httpd.service memcached.service || true
systemctl disable httpd.service memcached.service || true

# remove horizon packages
echo "removing packages..."
dnf remove -y openstack-dashboard

# restore original configuration if backup exists
echo "restoring configs..."
orig="/etc/openstack-dashboard/local_settings"
restore_config
orig="/etc/httpd/conf.d/openstack-dashboard.conf"
restore_config

# remove firewall rules
echo "removing firewall rules..."
firewall-cmd --remove-port=9090/tcp --permanent
firewall-cmd --reload

echo "### cleanup completed ###"
}

clean_neutron_controller()
{

# Stop and disable Neutron services
echo "Stopping and disabling Neutron services..."
systemctl stop neutron-server.service neutron-openvswitch-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.service || true
systemctl disable neutron-server.service neutron-openvswitch-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.service || true

# Remove Neutron packages
echo "removing packages..."
dnf remove -y openstack-neutron openstack-neutron-ml2 openstack-neutron-openvswitch ebtables

# Restore original configuration files if backups exist
orig="/etc/neutron/neutron.conf"
restore_config
orig="/etc/neutron/plugins/ml2/ml2_conf.ini"
restore_config
orig="/etc/neutron/plugins/ml2/openvswitch_agent.ini"
restore_config
orig="/etc/neutron/l3_agent.ini"
restore_config
orig="/etc/neutron/dhcp_agent.ini"
restore_config
orig="/etc/neutron/metadata_agent.ini"
restore_config
orig="/etc/nova/nova.conf"
restore_config

# Drop the Neutron database
echo "removing databases..."
mysql -e "DROP DATABASE IF EXISTS neutron;"
mysql -e "DROP USER IF EXISTS 'neutron'@'localhost';"
mysql -e "DROP USER IF EXISTS 'neutron'@'%';"

# Remove OpenStack Neutron user and endpoints
echo "Removing Neutron user and endpoints from OpenStack..."
srcopenrc
openstack user delete neutron || true
openstack service delete network || true
openstack endpoint list | awk '/9696/ {print $2}' | xargs -I {} openstack endpoint delete {} || true

# Remove firewall rules
echo "removing firewall rules..."
firewall-cmd --remove-port=9696/tcp --permanent
firewall-cmd --reload

echo "### cleanup complete ###"
}

clean_neutron_compute_node()
{

# Stop and disable Neutron service
echo "stopping services..."
systemctl stop neutron-openvswitch-agent.service || true
systemctl disable neutron-openvswitch-agent.service || true

# Remove Neutron package
echo "removing packages..."
dnf remove -y openstack-neutron-openvswitch

# Restore original configuration files if backups exist
echo "restoring configs..."
orig="/etc/neutron/neutron.conf"
restore_config
orig="/etc/neutron/plugins/ml2/openvswitch_agent.ini"
restore_config
orig="/etc/nova/nova.conf"
restore_config

# Restart Nova Compute service
echo "restarting services..."
systemctl restart openstack-nova-compute.service || true

echo "### cleanup complete ###"

}

clean_neutron_block_node()
{

# stop neutron services if running
echo "stopping services..."
systemctl stop neutron-server.service neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.service 2>/dev/null || true

# remove neutron database
echo "removing databases..."
mysql -e "DROP DATABASE IF EXISTS neutron;"
mysql -e "DELETE FROM mysql.db WHERE Db='neutron';"
mysql -e "DELETE FROM mysql.user WHERE User='neutron';"
mysql -e "FLUSH PRIVILEGES;"

# remove neutron user from openstack
echo "reverting openstack config..."
srcopenrc
openstack user delete neutron 2>/dev/null || true

# restore original configuration files if backups exist
orig="/etc/neutron/neutron.conf"
restore_config

echo "### cleanup complete ###"
	
}
