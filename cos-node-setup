#!/bin/bash

# Error handling
# Exit script on first error
set -o errexit  
# Catch errors in pipelines
set -o pipefail 
# make traps work inside functions
set -E

clean_resume()
{
# fix variable to work
echo "cleaning up..."
case $resumeclean in
	componenetstat		) 
		if [ "$archetype" = "controller" ]; then
			clean_compnents_controller
		else
			clean_components_node
		fi	
		;;
	mariadbstat		) 
		clear_mariadb_controller
		;;
	rabbitmqstat		) clean_rabbitmq_controller ;;
	memcachedstat		) clean_memcached_controller ;;
	etcdstat		) clean_etcd_controller ;;
	keystonestat		) clean_keystone_controller ;;
	glancestat		) clean_glance_controller ;;
	placementstat		) clean_placement_controller ;;
	novastat		) 
		if [ "$archetype" = "controller" ]; then
			clean_nova_controller
		else
			clean_nova_node
		fi
		;;
	neutronstat		) 
		if [ "$archetype" = "controller" ]; then
			clean_neutron_controller
		else
			clean_neutron_compute_node
		fi
		;;
	cinderstat		) 
		if [ "$archetype" = "controller" ]; then
			clean_cinder_controller
		elif [ "$archetype" = "cinderbackupnode" ]; then
			clean_cinder_backup_node
		else
			clean_cinder_node
		fi
		;;
	horizonstat		) clean_horizon ;;

esac
}

handle_error() {
if [ -z "$resumeclean" ]; then
	clean_resume
fi
echo "======================================================================="
echo "$stage installation or execution error on ${BASH_LINENO[0]}, goodbye"
echo "======================================================================="
exit 1
}

# Trap errors and call the error handler
trap 'handle_error $LINENO' ERR HUP INT QUIT TERM PIPE

[ "$(id -u)" -ne "0" ] && echo "you are not root: use 'sudo -s'" && exit



help()
{
echo "Syntax: cos-node-setup [ ARG ARG ARG ]
***valid arguments***:"
#awk '/(controller|all|node|archetype|resume|help)\(\)/{print  }' cos-node-setup | sed "s/[{|\(|\)]//g"
awk '/([a-z]{1,25}\(\))/{print  }' cos-node-setup | sed "s/[{|\(|\)]//g"
}

generatepasswords() {
[ -e "openstack_passwords" ] && $(mv openstack_passwords openstack_passwords.bak)
echo "# Database password (no variable used) 
# Root password for the database

" >> openstack_passwords

admin_pass=$(openssl rand -hex 10)
echo "# Password of user admin
ADMIN_PASS=$admin_pass

" >> openstack_passwords

cinder_dbpass=$(openssl rand -hex 10)
echo "# Database password for the Block Storage service
CINDER_DBPASS=$cinder_dbpass

" >> openstack_passwords

cinder_pass=$(openssl rand -hex 10)
echo "# Password of Block Storage service user cinder
CINDER_PASS=$cinder_pass

" >> openstack_passwords

dash_dbpass=$(openssl rand -hex 10)
echo "# Database password for the Dashboard
DASH_DBPASS=$dash_dbpass

" >> openstack_passwords

myuser_pass=$(openssl rand -hex 10)
echo "# Password of user
MYUSER_PASS=$myuser_pass

" >> openstack_passwords

glance_dbpass=$(openssl rand -hex 10)
echo "# Database password for Image service
GLANCE_DBPASS=$glance_dbpass

" >> openstack_passwords

glance_pass=$(openssl rand -hex 10)
echo "# Password of Image service user glance
GLANCE_PASS=$glance_pass

" >> openstack_passwords

keystone_dbpass=$(openssl rand -hex 10)
echo "# Database password of Identity service
KEYSTONE_DBPASS=$keystone_dbpass

" >> openstack_passwords

metadata_secret=$(openssl rand -hex 10)
echo "# Secret for the metadata proxy
METADATA_SECRET=$metadata_secret

" >> openstack_passwords

neutron_dbpass=$(openssl rand -hex 10)
echo "# Database password for the Networking service
NEUTRON_DBPASS=$neutron_dbpass

" >> openstack_passwords

neutron_pass=$(openssl rand -hex 10)
echo "# Password of Networking service user neutron
NEUTRON_PASS=$neutron_pass

" >> openstack_passwords
	
nova_dbpass=$(openssl rand -hex 10)
echo "# Database password for Compute service
NOVA_DBPASS=$nova_dbpass

" >> openstack_passwords

nova_pass=$(openssl rand -hex 10)
echo "# Password of Compute service user nova
NOVA_PASS=$nova_pass

" >> openstack_passwords

placement_pass=$(openssl rand -hex 10)
echo "# password of the placement service user placement
PLACEMENT_PASS=$placement_pass

" >> openstack_passwords

placement_dbpass=$(openssl rand -hex 10)
echo "# password of the placement service user placement
PLACEMENT_DBPASS=$placement_dbpass

" >> openstack_passwords

rabbit_pass=$(openssl rand -hex 10)
echo "# Password of RabbitMQ user openstack
RABBIT_PASS=$rabbit_pass

" >> openstack_passwords

swift_pass=$(openssl rand -hex 10)
echo "# Password of RabbitMQ user openstack
SWIFT_PASS=$rabbit_pass

" >> openstack_passwords

. openstack_passwords

echo "========================================================================================"
echo "Your passwords are in the file $(pwd)/openstack_passwords"
echo "========================================================================================"
}

srcopenrc()
{
#check for admin openrc
if [ -e "admin-openrc" ]; then
	echo "admin-openrc found"
	osadmin=admin-openrc
	sleep 2
else
	echo -n "specify path (if no, files will be created) [y/n] >"
	read -t 5 specifypath || specifypath="n"
	if [ "$specifypath" == "y" ]; then  
		echo -n "enter path of admin-openrc or equivalent file > "
		read osadmin
	else
	# Create myuser and openrc auth files
		echo "==========================================================="
		echo "creating $myuser and admin openrc auth files "
		echo "==========================================================="
		echo "export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=admin
export OS_USERNAME=admin
export OS_PASSWORD=$ADMIN_PASS
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2" > admin-openrc
		echo "==========================================================="
		echo "$(pwd)/admin-openrc created "
		echo "==========================================================="
		osadmin=admin-openrc
		source $osadmin
		openstack user create --domain default --password $MYUSER_PASS $myuser
		echo "export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=myproject
export OS_USERNAME=$myuser
export OS_PASSWORD=$MYUSER_PASS
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2" > $myuser-openrc
		echo "==========================================================="
		echo "$(pwd)/$myuser-openrc created "
		echo "==========================================================="
		sleep 4
	
	fi
fi
source $osadmin
if [ "$?" -gt "0" ]; then 
	echo "openrc auth error; exit or retry [r/x] > " 
	read retry
	[ "$retry" == "r" ] && srcopenrc || exit
fi

}

save_config()
{
if [ -e "$orig" ]; then
	cp $orig ${orig}.BAK 
else
	echo "$orig does not exist, skipping backup..."
fi
}

restore_config()
{
if [ -e "${orig}.BAK" ]; then
	cp ${orig}.BAK $orig
	echo "restored previous $orig configuration..."
else
	echo "$orig does not exist, skipping restore..."
fi
}

base_all() {
# install base node packages
stage=base
echo "==============================================="
echo "         installing base packages  "
echo "==============================================="

dnf upgrade -y
dnf install -y dnf-plugins-core
dnf config-manager --set-enabled crb
dnf upgrade -y
dnf install -y centos-release-openstack-$release
dnf install -y python3-openstackclient openstack-selinux
sed -i /basestat/s/1/0/ resume_status
echo "### base install complete ###"
}

components_controller()
{
dnf install -y chrony
orig="/etc/chrony.conf"
save_config
sed -i "/^#allow/a allow $mgmtsubnet" /etc/chrony.conf
systemctl enable chronyd.service
systemctl start chronyd.service
chronyc sources
echo "### components controller install complete ###"
}

components_node()
{
dnf install -y chrony
orig=/etc/chrony.conf
save_config
sed -i 's/^pool/#pool/' /etc/chrony.conf
sed -i "/^#pool/a server\ controller\ iburst" /etc/chrony.conf
systemctl enable chronyd.service
systemctl start chronyd.service
chronyc sources
echo "### components node install complete ###"
}

mariadb_controller() {
# Install MariaDB
stage=mariadb
echo "==============================================="
echo "             installing mariadb      "
echo "==============================================="
echo "installing mariadb packages..."
dnf install -y mariadb mariadb-server python3-PyMySQL 

echo "writing mariadb config..."
orig="/etc/my.cnf.d/openstack.cnf"
save_config
echo "[mysqld]
bind-address = $controllerip

default-storage-engine = innodb
innodb_file_per_table = on
max_connections = 4096
collation-server = utf8_general_ci
character-set-server = utf8" > /etc/my.cnf.d/openstack.cnf

echo "starting service..."
systemctl enable --now mariadb.service
sed -i /mariadbstat/s/1/0/ resume_status
echo "### mariadb install complete ###"
}

rabbitmq_controller() {
# Message Queue - Rabbit MQ
stage=rabbitmq
echo "==============================================="
echo "           setting up rabbit mq "
echo "==============================================="
echo "installing rabbit mq packages..."
dnf install -y rabbitmq-server

echo "starting service..."
systemctl enable --now rabbitmq-server

echo "setting permissions..."
firewall-cmd --add-port=5672/tcp --permanent
firewall-cmd --reload
rabbitmqctl add_user openstack $RABBIT_PASS
rabbitmqctl set_permissions openstack ".*" ".*" ".*"
sed -i /rabbitmqstat/s/1/0/ resume_status
echo "### rabbit mq install complete ###"
}

memcached_controller() {
# Memcached
stage=memcached

echo "==============================================="
echo "            setting up memcached "
echo "==============================================="

echo "installing memcached packages..."
dnf install -y memcached python3-memcached

echo "writing memcached config..."
orig="/etc/sysconfig/memcached"
save_config
sed -i s/'OPTIONS="-l 127.0.0.1,::1"/OPTIONS="-l 127.0.0.1,::1,controller"'/ /etc/sysconfig/memcached
firewall-cmd --add-port=11211/tcp --permanent
firewall-cmd --reload


echo "starting service..."
systemctl enable --now memcached.service
sed -i /memcachedstat/s/1/0/ resume_status

echo "### memcached install complete ###"
}

etcd_controller() {
# ETCd
stage=etcd
echo "==============================================="
echo "              setting up ETCd "
echo "==============================================="

echo "installing etcd packages"
dnf install -y etcd

echo "writing etcd config..."
orig="/etc/etcd/etcd.conf"
save_config
sed -i 's/^[^#]/#/' /etc/etcd/etcd.conf
[ -z "$controllerip" ] && echo -n "Enter controller ip" && read controllerip
echo "#[Member]
ETCD_DATA_DIR=\"/var/lib/etcd/default.etcd\"
ETCD_LISTEN_PEER_URLS=\"http://$controllerip:2380\"
ETCD_LISTEN_CLIENT_URLS=\"http://$controllerip:2379\"
ETCD_NAME=\"controller\"
#[Clustering]
ETCD_INITIAL_ADVERTISE_PEER_URLS=\"http://$controllerip:2380\"
ETCD_ADVERTISE_CLIENT_URLS=\"http://$controllerip:2379\"
ETCD_INITIAL_CLUSTER=\"controller=http://$controllerip:2380\"
ETCD_INITIAL_CLUSTER_TOKEN=\"etcd-cluster-01\"
ETCD_INITIAL_CLUSTER_STATE=\"new\"" >> /etc/etcd/etcd.conf
firewall-cmd --add-port=2379/tcp --permanent
firewall-cmd --add-port=2380/tcp --permanent
firewall-cmd --reload


echo "starting service..."
systemctl enable --now etcd
sed -i /etcdstat/s/1/0/ resume_status
echo "### etcd install complete ###"
}

keystone_controller() {
# Install Keystone
stage=keystone
echo "==============================================="
echo "            setting up Keystone "
echo "==============================================="

echo "configuring databases..."
mysql -e "CREATE DATABASE keystone;"
mysql -e "GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' IDENTIFIED BY '$KEYSTONE_DBPASS';"
mysql -e "GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' IDENTIFIED BY '$KEYSTONE_DBPASS';"

echo "installing keystone packages..."
dnf install -y openstack-keystone httpd mod_wsgi

echo "writing keystone config..."
orig="/etc/keystone/keystone.conf"
save_config
sed -i "/\[database\]/a connection = mysql+pymysql://keystone:$KEYSTONE_DBPASS@controller/keystone" /etc/keystone/keystone.conf
sed -i '/\^[token\]/a provider = fernet' /etc/keystone/keystone.conf
su -s /bin/sh -c "keystone-manage db_sync" keystone
keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
keystone-manage credential_setup --keystone-user keystone --keystone-group keystone
keystone-manage bootstrap --bootstrap-password $ADMIN_PASS \
  --bootstrap-admin-url http://controller:5000/v3/ \
  --bootstrap-internal-url http://controller:5000/v3/ \
  --bootstrap-public-url http://controller:5000/v3/ \
  --bootstrap-region-id RegionOne
orig="/etc/httpd/conf/httpd.conf"
save_config
sed -i '/\#ServerName/a ServerName controller' /etc/httpd/conf/httpd.conf
ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/
firewall-cmd --add-port=5000/tcp --permanent
firewall-cmd --reload

echo "starting httpd server..."
systemctl enable --now httpd.service

# Set Keystone Environment Variables
echo "configuring Keystone environment variables ..."
export OS_USERNAME=admin
export OS_PASSWORD=$ADMIN_PASS
export OS_PROJECT_NAME=admin
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_DOMAIN_NAME=Default
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
sed -i /keystonestat/s/1/0/ resume_status
echo "### keystone install complete ###"
}

glance_controller() {
# Install Glance
stage=glance
echo "==============================================="
echo "             setting up glance"
echo "==============================================="

echo "configuring databases..."
mysql -e "CREATE DATABASE glance;"
mysql -e "GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' \
  IDENTIFIED BY '$GLANCE_DBPASS';"
mysql -e "GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' \
  IDENTIFIED BY '$GLANCE_DBPASS';"

srcopenrc
echo "configuring openstack..."
openstack user create --domain default --password $GLANCE_PASS glance
openstack project create service
openstack role add --project service --user glance admin
openstack role add --user glance --user-domain Default --system all reader
openstack service create --name glance --description "OpenStack Image" image
openstack endpoint create --region RegionOne image public http://controller:9292
openstack endpoint create --region RegionOne image internal http://controller:9292
openstack endpoint create --region RegionOne image admin http://controller:9292
echo "================================================================"
echo "     not setting quota limits - see openstack documentation "
echo "================================================================"

# Install & Configure components
echo "installing glance packages"
dnf install -y openstack-glance

echo "writing glance config..." 
orig="/etc/glance/glance-api.conf" 
save_config
sed -i "/^\[database\]/a connection = mysql+pymysql://glance:$GLANCE_DBPASS@controller/glance" /etc/glance/glance-api.conf 
sed -i "/^\[keystone_authtoken\]/a www_authenticate_uri = http://controller:5000\nauth_url = http://controller:5000\nmemcached_servers = controller:11211\nauth_type = password\nproject_domain_name = Default\nuser_domain_name = Default\nproject_name = service\nusername = glance\npassword = $GLANCE_PASS" /etc/glance/glance-api.conf
sed -i "/^\[paste_deploy\]/a flavor = keystone" /etc/glance/glance-api.conf 
sed -i '/^\#enabled_backends/a enabled_backends=fs:file' /etc/glance/glance-api.conf
sed -i '/^\#default_backend/a default_backend = fs' /etc/glance/glance-api.conf
sed -i 's@\#filesystem_store_datadir@filesystem_store_datadir = /var\/lib\/glance\/images/@' /etc/glance/glance-api.conf
sed -i "/^\[oslo_limit\]/a www_authenticate_uri = http://controller:5000\nauth_url = http://controller:5000\nmemcached_servers = controller:11211\nauth_type = password\nproject_domain_name = Default\nuser_domain_name = Default\nproject_name = service\nusername = glance\npassword = $GLANCE_PASS"  /etc/glance/glance-api.conf
firewall-cmd --add-port=9292/tcp --permanent
firewall-cmd --reload

# echo "configuring openstack..."

echo "populating database..."
/bin/sh -c "glance-manage db_sync" glance

echo "starting service..."
systemctl enable --now openstack-glance-api.service
sed -i /glancestat/s/1/0/ resume_status
echo "### glance install complete ###"
}

placement_controller()
{
stage=placement
echo "==============================================="
echo "   setting up placment for controller node"
echo "==============================================="

echo "configuring databases..."
mysql -e "CREATE DATABASE placement;"
mysql -e "GRANT ALL PRIVILEGES ON placement.* TO 'placement'@'localhost' IDENTIFIED BY '$PLACEMENT_DBPASS';" 
mysql -e "GRANT ALL PRIVILEGES ON placement.* TO 'placement'@'%' IDENTIFIED BY '$PLACEMENT_DBPASS';"

echo "configuring openstack..."
srcopenrc
openstack user list | grep -cw placement || openstack user create --domain default --password $PLACEMENT_PASS placement
openstack role add --project service --user placement admin
openstack service create --name placement --description "Placement API" placement
openstack endpoint create --region RegionOne placement public http://controller:8778
openstack endpoint create --region RegionOne placement internal http://controller:8778
openstack endpoint create --region RegionOne placement admin http://controller:8778
dnf install -y openstack-placement-api python3-osc-placement

echo "writing placment config ..."
orig="/etc/placement/placement.conf"
sed -i "/^\[placement_database\]/a connection = mysql+pymysql://placement:$PLACEMENT_DBPASS@controller/placement" /etc/placement/placement.conf
sed -i "/^\[api\]/a auth_strategy = keystone" /etc/placement/placement.conf
sed -i "/^\[keystone_authtoken\]/a auth_url = http://controller:5000/v3 \nmemcached_servers = controller:11211 \nauth_type = password \nproject_domain_name = Default \nuser_domain_name = Default \nproject_name = service \nusername = placement \npassword = $PLACEMENT_PASS" /etc/placement/placement.conf
orig="/etc/httpd/conf.d/00-placement-api.conf"
sed -i '/^<Virtual/a \ \ <Directory /usr/bin>\n\tRequire all granted \n\ \ </Directory>' /etc/httpd/conf.d/00-placement-api.conf
firewall-cmd --add-port=8778/tcp --permanent
firewall-cmd --reload


echo "populating placement database..."
su -s /bin/sh -c "placement-manage db sync" placement

echo "restarting http server..."
systemctl restart httpd
sed -i /placementstat/s/1/0/ resume_status
echo "### placement install complete ###"
}

nova_controller() {
# Install Nova - Controller Node
stage="nova controller"
echo "==============================================="
echo "     setting up nova for controller node"
echo "==============================================="

echo "configuring databases..."
mysql -e "CREATE DATABASE nova_api;"
mysql -e "CREATE DATABASE nova;"
mysql -e "CREATE DATABASE nova_cell0;"
mysql -e "GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'localhost' \
  IDENTIFIED BY '$NOVA_DBPASS';"
mysql -e "GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'%' \
  IDENTIFIED BY '$NOVA_DBPASS';"
mysql -e "GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'localhost' \
  IDENTIFIED BY '$NOVA_DBPASS';"
mysql -e "GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%' \
  IDENTIFIED BY '$NOVA_DBPASS';"
mysql -e "GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'localhost' \
  IDENTIFIED BY '$NOVA_DBPASS';"
mysql -e "GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'%' \
  IDENTIFIED BY '$NOVA_DBPASS';"

# adding nova user
echo "configuring openstack..."
srcopenrc
openstack user create --domain default --password $NOVA_PASS nova
openstack role add --project service --user nova admin

# creating nova services
openstack service create --name nova --description "OpenStack Compute" compute

# creating nova api endpoints 
openstack endpoint create --region RegionOne compute public http://controller:8774/v2.1
openstack endpoint create --region RegionOne compute internal http://controller:8774/v2.1
openstack endpoint create --region RegionOne compute admin http://controller:8774/v2.1

echo "installing nova packages..."
dnf install -y openstack-nova-api openstack-nova-conductor  openstack-nova-novncproxy openstack-nova-scheduler

echo "writing nova configuration..."
sed -i "/^\[DEFAULT\]/a enabled_apis = osapi_compute,metadata \ntransport_url = rabbit://openstack:$RABBIT_PASS@controller:5672/\nmy_ip = $controllerip"  /etc/nova/nova.conf
sed -i "/^\[api_database\]/a connection = mysql+pymysql://nova:$NOVA_DBPASS@controller/nova_api" /etc/nova/nova.conf
sed -i "/^\[database\]/a connection = mysql+pymysql://nova:$NOVA_DBPASS@controller/nova" /etc/nova/nova.conf
sed -i "/^\[api\]/a \# ...\nauth_strategy = keystone" /etc/nova/nova.conf
sed -i "/^\[keystone_authtoken\]/a \nwww_authenticate_uri = http://controller:5000/\nauth_url = http://controller:5000/\nmemcached_servers = controller:11211\nauth_type = password\nproject_domain_name = Default\nuser_domain_name = Default\nproject_name = service\nusername = nova\npassword = $NOVA_PASS" /etc/nova/nova.conf
sed -i "/^\[service_user\]/a send_service_user_token = true\nauth_url = https://controller/identity\nauth_strategy = keystone\nauth_type = password\nproject_domain_name = Default\nproject_name = service\nuser_domain_name = Default\nusername = nova\npassword = $NOVA_PASS" /etc/nova/nova.conf
sed -i "/^\[vnc\]/a enabled = true\nserver_listen = $controllerip\nserver_proxyclient_address = $controllerip" /etc/nova/nova.conf
sed -i "/^\[glance\]/a api_servers = http://controller:9292" /etc/nova/nova.conf
sed -i "/^\[oslo_concurrency\]/a lock_path = /var/lib/nova/tmp" /etc/nova/nova.conf
sed -i "/^\[placement\]/a region_name = RegionOne\nproject_domain_name = Default\nproject_name = service\nauth_type = password\nuser_domain_name = Default\nauth_url = http://controller:5000/v3\nusername = placement\npassword = $PLACEMENT_PASS" /etc/nova/nova.conf
sed -i "/^\[scheduler\]/a discover_hosts_in_cells_interval = 300" /etc/nova/nova.conf
firewall-cmd --add-port=8774/tcp --permanent
firewall-cmd --reload

# populate nova-api db
echo "populating databases..."
su -s /bin/sh -c "nova-manage api_db sync" nova
su -s /bin/sh -c "nova-manage cell_v2 map_cell0" nova
su -s /bin/sh -c "nova-manage cell_v2 create_cell --name=cell1 --verbose" nova
su -s /bin/sh -c "nova-manage db sync" nova
su -s /bin/sh -c "nova-manage cell_v2 list_cells" nova

echo "starting services..."
# enable services

systemctl enable \
openstack-nova-api.service \
openstack-nova-scheduler.service \
openstack-nova-conductor.service \
openstack-nova-novncproxy.service

# start services
systemctl start \
openstack-nova-api.service \
openstack-nova-scheduler.service \
openstack-nova-conductor.service \
openstack-nova-novncproxy.service

sed -i /novastat/s/1/0/ resume_status
echo "### nova install compelete ###"
}
### Firewall rules
nova_compute_node()
{
# install nova
stage=novanode
echo "==============================================="
echo "      installing nove for compute node"
echo "==============================================="

echo "installing nova packages..."
dnf install -y openstack-nova-compute libvirt-daemon

# write configs
echo "writing nova config..."
chown -R nova:nova /usr/lib/python3.9/site-packages/
orig="/etc/nova/nova.conf"
save_config
sed -i "/^\[DEFAULT\]/a enabled_apis = osapi_compute,metadata \ntransport_url = rabbit://openstack:$RABBIT_PASS@controller:5672\nmy_ip = $controllerip\ncompute_driver = libvirt.LibvirtDriver"  /etc/nova/nova.conf
sed -i "/^\[api\]/a \# ...\nauth_strategy = keystone" /etc/nova/nova.conf
sed -i "/^\[keystone_authtoken\]/a www_authenticate_uri = http://controller:5000/\nauth_url = http://controller:5000/\nmemcached_servers = controller:11211\nauth_type = password\nproject_domain_name = Default\nuser_domain_name = Default\nproject_name = service\nusername = nova\npassword = $NOVA_PASS" /etc/nova/nova.conf
sed -i "/^\[service_user\]/a send_service_user_token = true\nauth_url = https://controller/identity\nauth_strategy = keystone\nauth_type = password\nproject_domain_name = Default\nproject_name = service\nuser_domain_name = Default\nusername = nova\npassword = $NOVA_PASS" /etc/nova/nova.conf
sed -i "/^\[vnc\]/a enabled = true\nserver_listen = 0.0.0.0\nserver_proxyclient_address = $computeip\nnovncproxy_base_url = http://controller:6080/vnc_auto.html" /etc/nova/nova.conf
sed -i "/^\[glance\]/a api_servers = http://controller:9292" /etc/nova/nova.conf
sed -i "/^\[oslo_concurrency\]/a lock_path = /var/lib/nova/tmp" /etc/nova/nova.conf
sed -i "/^\[placement\]/a region_name = RegionOne\nproject_domain_name = Default\nproject_name = service\nauth_type = password\nuser_domain_name = Default\nauth_url = http://controller:5000/v3\nusername = placement\npassword = $PLACEMENT_PASS" /etc/nova/nova.conf

# finalize installation

if [ "$(egrep -c '(vmx|svm)' /proc/cpuinfo)" ]; then
	echo "================================================================================================="
	echo "            this machine supports hardware acceleration\nnova configuration complete"
	echo "================================================================================================="
else
	sed -i "/^\[libvirt\]/a qemu"
	echo "================================================================================================="
	echo "  this machine does not support hardware acceleration\nusing quemu\nova configuration complete"
	echo "================================================================================================="
fi

# set services up
echo "starting services..."
systemctl enable libvirtd.service openstack-nova-compute.service
systemctl start libvirtd.service openstack-nova-compute.service
sed -i /novastat/s/1/0/ resume_status

echo "### nova install complete ###"
echo "nova compute (node) set up; run the following to discover hosts manually on the controller node\nsu -s /bin/sh -c \"nova-manage cell_v2 discover_hosts --verbose\" nova"
read -t 10 -p "press enter to continue" || echo ""
}

cinder_controller()
{
# install cinder control server
stage=cinderctl
echo "==============================================="
echo "      installing cinder for contoller"
echo "==============================================="

# database setup
echo "configuring database..."
mysql -e "CREATE DATABASE cinder;"
mysql -e "GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'localhost' IDENTIFIED BY '$CINDER_DBPASS';"
mysql -e "GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'%' IDENTIFIED BY '$CINDER_DBPASS';"

# openstack setup
echo "configuring openstack..."
srcopenrc
openstack user create --domain default --password $CINDER_PASS cinder
openstack role add --project service --user cinder admin
openstack service create --name cinderv3 --description "OpenStack Block Storage" volumev3
openstack endpoint create --region RegionOne volumev3 public http://controller:8776/v3/%\(project_id\)s
openstack endpoint create --region RegionOne volumev3 internal http://controller:8776/v3/%\(project_id\)s
openstack endpoint create --region RegionOne volumev3 admin http://controller:8776/v3/%\(project_id\)s

# install and write config files
echo "installing cinder packages..."
dnf install -y openstack-cinder

echo "writing cinder config..."
sed -i "/^\[DEFAULT\]/a transport_url = rabbit://openstack:$RABBIT_PASS@controller:5672\nauth_strategy = keystone\nmy_ip = $controllerip" /etc/cinder/cinder.conf
sed -i "/^\[keystone_authtoken\]/a www_authenticate_uri = http://controller:5000\nauth_url = http://controller:5000\nmemcached_servers = controller:11211\nauth_type = password\nproject_domain_name = default\nuser_domain_name = default\nproject_name = service\nusername = cinder\npassword = $CINDER_PASS" /etc/cinder/cinder.conf
sed -i "/^\[oslo_concurrency\]/a lock_path = /var/lib/cinder/tmp" /etc/cinder/cinder.conf
sed -i "/^\[cinder\]/a os_region_name = RegionOne" /etc/nova/nova.conf
sed -i "/^\[database\]/a connection = mysql+pymysql://cinder:$CINDER_DBPASS@controller/cinder" /etc/nova/nova.conf

echo "adding firewall rules..."
firewall-cmd --add-port=8776/tcp --permanent
firewall-cmd --reload


# populate database
echo "populating database ..."
/bin/sh -c "cinder-manage db sync" cinder

# start services
echo "starting services..."
systemctl restart openstack-nova-api.service
systemctl enable openstack-cinder-api.service openstack-cinder-scheduler.service
systemctl start openstack-cinder-api.service openstack-cinder-scheduler.service
sed -i /cinderstat/s/1/0/ resume_status
echo "### cinder install complete ###"
}

cinder_node()
{
# install cinder node
stage=cindernode
echo "==============================================="
echo "   installing cinder for block storage node"
echo "==============================================="

# test for volume
if [[ "$cinderdev" != "$(fdisk -l | sed -n '/^Device/,/^Disk/{ /^\/dev/p }' | grep -Eo '\/[a-z]{3}\/([a-z]{1,4}[0-9]{1,2})' | grep $cinderdev)" ]]; then
       echo "$cinderdev is not present"
       exit 1
fi

echo "creating storage volume..."
pvcreate /dev/$cinderdev
vgcreate cinder-volumes /dev/$cinderdev
sed -i "/^devices/a filter = [ \"a/$cinderdev/\", \"r/.*/\"" /etc/lvm/lvm.conf

# install and configure
echo "installing cinder packages..."
dnf install -y openstack-cinder targetcli

echo "writing cinder config..."
orig=/etc/lvm/lvm.conf
save_config
sed -i "/^\[DEFAULT\]/a my_ip = $cinderctrlip\nenabled_backends = lvm\nglance_api_servers = http://controller:9292\ntransport_url = rabbit://openstack:$RABBIT_PASS@controller:5672\nauth_strategy = keystone" /etc/lvm/lvm.conf
sed -i "/^\[database\]/a connection = mysql+pymysql://cinder:$CINDER_DBPASS@controller/cinder" /etc/lvm/lvm.conf
sed -i "/^\[lvm\]/a \nvolume_driver = cinder.volume.drivers.lvm.LVMVolumeDriver\nvolume_group = cinder-volumes\ntarget_protocol = iscsi\ntarget_helper = lioadm" /etc/lvm/lvm.conf
sed -i "/^\[oslo_concurrency\]/a lock_path = /var/lib/cinder/tmp" /etc/lvm/lvm.conf
sed -i "/^\[keystone_authtoken\]/a \nwww_authenticate_uri = http://controller:5000\nauth_url = http://controller:5000\nmemcached_servers = controller:11211\nauth_type = password\nproject_domain_name = default\nuser_domain_name = default\nproject_name = service\nusername = cinder\npassword = $CINDER_PASS" /etc/lvm/lvm.conf

# start and enable services
echo "starting service..."
systemctl enable openstack-cinder-volume.service target.service
systemctl start openstack-cinder-volume.service target.service

sed -i /cindernodestat/s/1/0/ resume_status
echo "### cinder install complete ###"
}

cinder_backup_node()
{
stage="cinder for backup node ***swift required***"
echo "==============================================="
echo "      setting up cinder for backup node"
echo "==============================================="

echo "installing cinder packages..."
dnf install -y openstack-cinder

echo "configuring openstack..."
srcopenrc
SWIFT_URL=$(openstack catalog show object-store | grep -o -E 'http[s]?://[^ ]+' | sed -n '1p')
sed -i "/^\[DEFAULT\]/a backup_driver = cinder.backup.drivers.swift.SwiftBackupDriver\nbackup_swift_url = $SWIFT_URL" /etc/nova/nova.conf

# start services
echo "starting service..."
systemctl enable openstack-cinder-backup.service
systemctl start openstack-cinder-backup.service

sed -i /cinderbackupstat/s/1/0/ resume_status
echo "### cinder install complete ###"
}

horizon()
{
# install horizon dashboard
stage="horizon dashboard"
echo "==============================================="
echo "       installing horizon dashboard"
echo "==============================================="

echo "installing packages..."
dnf install -y openstack-dashboard

# config files
#read -p "press enter to continue"

echo "writing horizon config..."
orig=/etc/openstack-dashboard/local_settings
save_config
linemcd=$(awk '/^#CACHES/{ print NR }' /etc/openstack-dashboard/local_settings)
#echo $linemcd
#echo 1
sed -i '/^#SESSION_ENGINE/s/^#//' /etc/openstack-dashboard/local_settings
#echo 2
sed -i "$linemcd,$(awk -v line="$linemcd" 'BEGIN {print line + 5}')s/^#//" /etc/openstack-dashboard/local_settings
sed -i "$linemcd,/}/s/127.0.0.1/controller/" /etc/openstack-dashboard/local_settings
#echo 3
sed -i '/^OPENSTACK_KEYSTONE_URL/s/%s/%s:5000/' /etc/openstack-dashboard/local_settings
sed -i "$(awk '/^OPENSTACK_HOST/{ print NR }' /etc/openstack-dashboard/local_settings)s/127.0.0.1/controller/" /etc/openstack-dashboard/local_settings
#echo 4
sed -i "$(awk '/^OPENSTACK_KEYSTONE_URL/{ print NR }' /etc/openstack-dashboard/local_settings)a OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True" /etc/openstack-dashboard/local_settings
#echo 5
IFS=","
hzcleanedhosts=$(for x in "$hzallowedhosts"; do echo -n "'$x', "; done)
#echo 6
sed -i "$(awk '/^ALLOWED_HOSTS/{ print NR }' /etc/openstack-dashboard/local_settings)s/'horizon.example.com',/$hzcleanedhosts/" /etc/openstack-dashboard/local_settings
#echo 7
sed -i "$(awk '/^OPENSTACK_KEYSTONE_URL/{ print NR }' /etc/openstack-dashboard/local_settings)a OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True\nOPENSTACK_API_VERSIONS = {\n\t\"identity\": 3,\n\t\"image\": 2,\n\t\"volume\": 3,\n}\n\nOPENSTACK_KEYSTONE_DEFAULT_DOMAIN = \"Default\"\nOPENSTACK_KEYSTONE_DEFAULT_ROLE = \"user\"" /etc/openstack-dashboard/local_settings
#echo 8
echo "WEBROOT = \"/\"" >> /etc/openstack-dashboard/local_settings
#sed -i "$(awk '/^TIME_ZONE/{ print NR }' /etc/openstack-dashboard/local_settings)s/"UTC"/$srvtz/" /etc/openstack-dashboard/local_settings
#echo 9
# openstack-dashboard.conf file
orig=/etc/httpd/conf.d/openstack-dashboard.conf
save_config
sed -i '1s|^|Listen 80\n|' /etc/httpd/conf.d/openstack-dashboard.conf
sed -i "/WSGIProcessGroup\ dashboard/aWSGIApplicationGroup\ %{GLOBAL}" /etc/httpd/conf.d/openstack-dashboard.conf
sed -i "/WSGIScriptAlias/s/dashboard//" /etc/httpd/conf.d/openstack-dashboard.conf
sed -i "/WSGIScriptAlias/s/wsgi\/django.wsgi/wsgi.py/" /etc/httpd/conf.d/openstack-dashboard.conf
sed -i "/<Directory \/usr\/share\/openstack-dashboard\/openstack_dashboard\/wsgi>/i <VirtualHost *:80>" /etc/httpd/conf.d/openstack-dashboard.conf
sed -i "/<Directory \/usr\/share\/openstack-dashboard\/openstack_dashboard\/wsgi>/s/\/wsgi//" /etc/httpd/conf.d/openstack-dashboard.conf
echo "</VirtualHost>" >> /etc/httpd/conf.d/openstack-dashboard.conf
firewall-cmd --add-service=http --permanent
firewall-cmd --reload

echo "restarting services..."
systemctl restart httpd.service memcached.service
sed -i /horizonstat/s/1/0/ resume_status
echo "### horizon install complete ###"
}

neutron_controller()
{
# install neutron networking on controller node
stage="connectivity to compute node"

stage="neutron controller"
echo "==============================================="
echo "      installing neutron for controller"
echo "==============================================="

echo "configuring database..."
mysql -e "CREATE DATABASE neutron;"
mysql -e "GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost' IDENTIFIED BY '$NEUTRON_DBPASS';"
mysql -e "GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%' IDENTIFIED BY '$NEUTRON_DBPASS';"

# configure openstack
echo "configuring openstack..."
srcopenrc
openstack user create --domain default --password $NEUTRON_PASS neutron
openstack role add --project service --user neutron admin
openstack service create --name neutron --description "OpenStack Networking" network
openstack endpoint create --region RegionOne network public http://controller:9696
openstack endpoint create --region RegionOne network internal http://controller:9696
openstack endpoint create --region RegionOne network admin http://controller:9696

# install and mod config files
echo "installing neutron packages..."
dnf install -y openstack-neutron openstack-neutron-ml2 openstack-neutron-openvswitch ebtables

# config neutron.conf
echo "writing neutron config..."
sed -i "/^\[database\]/a connection = mysql+pymysql://neutron:$NEUTRON_DBPASS@controller/neutron" /etc/neutron/neutron.conf
sed -i "/^\[DEFAULT\]/a core_plugin \= ml2\nservice_plugins \= router\ntransport_url \= rabbit://openstack:$RABBIT_PASS@controller:5672\nauth_strategy \= keystone\nnotify_nova_on_port_status_changes \= true\nnotify_nova_on_port_data_changes \= true" /etc/neutron/neutron.conf
sed -i "/^\[keystone_authtoken\]/a www_authenticate_uri = http://controller:5000\nauth_url = http://controller:5000\nmemcached_servers = controller:11211\nauth_type = password\nproject_domain_name = Default\nuser_domain_name = Default\nproject_name = service\nusername = neutron\npassword = $NEUTRON_PASS" /etc/neutron/neutron.conf
sed -i "/^\[oslo_concurrency\]/a lock_path = /var/lib/neutron/tmp" /etc/neutron/neutron.conf
sed -i "/^\[nova\]/a auth_url = http://controller:5000\nauth_type = password\nproject_domain_name = Default\nuser_domain_name = Default\nregion_name = RegionOne\nproject_name = service\nusername = nova\npassword = $NOVA_PASS" /etc/neutron/neutron.conf

# Configure the Modular Layer 2 (ML2) plug-in
sed -i "/^\[ml2\]/a type_drivers = flat,vlan,vxlan\ntenant_network_types = vxlan
\nmechanism_drivers = openvswitch,l2population\nextension_drivers = port_security" /etc/neutron/plugins/ml2/ml2_conf.ini
sed -i "/^\[ml2_type_flat\]/a flat_networks = provider" /etc/neutron/plugins/ml2/ml2_conf.ini
sed -i "/^\[ml2_type_vxlan\]/a vni_ranges = 1:1000" /etc/neutron/plugins/ml2/ml2_conf.ini
# Configure the Open vSwitch agent¶
sed -i "/^\ovs[\]/a bridge_mappings = provider:$provideriface" /etc/neutron/plugins/ml2/openvswitch_agent.ini
sed -i "/^\[vxlan\]/a local_ip = $overlayrip\nl2_population = true" /etc/neutron/plugins/ml2/openvswitch_agent.ini 
sed -i "/^\[securitygroup\]/a enable_security_group = true\nfirewall_driver = openvswitch" /etc/neutron/plugins/ml2/openvswitch_agent.ini
# Configure the layer-3 agent¶
sed -i "/^\[DEFAULT\]/a interface_driver = openvswitch" /etc/neutron/l3_agent.ini
# Configure the DHCP agent¶
sed -i "/^\[DEFAULT\]/a interface_driver = openvswitch\ndhcp_driver = neutron.agent.linux.dhcp.Dnsmasq\nenable_isolated_metadata = true" /etc/neutron/dhcp_agent.ini

# metadata_agent.ini
sed -i "/^\[DEFAULT\]/a nova_metadata_host = controller \nmetadata_proxy_shared_secret = METADATA_SECRET" /etc/neutron/metadata_agent.ini

# nova.conf
sed -i "/^\[neutron\]/a auth_url = http://controller:5000\nauth_type = password\nproject_domain_name = Default\nuser_domain_name = Default\nregion_name = RegionOne\nproject_name = service\nusername = neutron\npassword = $NEUTRON_PASS\nservice_metadata_proxy = true\nmetadata_proxy_shared_secret = METADATA_SECRET" /etc/nova/nova.conf

ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini

echo "populating database..."
/bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron
firewall-cmd --add-port=9696/tcp --permanent
firewall-cmd --reload


echo "starting services..."

systemctl restart openstack-nova-api.service
systemctl enable neutron-server.service neutron-openvswitch-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.service

systemctl start neutron-server.service \
neutron-openvswitch-agent.service neutron-dhcp-agent.service \
neutron-metadata-agent.service \
neutron-l3-agent.service

sed -i /neutronctrlstat/s/1/0/ resume_status
}

neutron_compute_node()
{
# install neutron networking on compute node
stage="connectivity to controller"

stage="neutron compute node" 
echo "==============================================="
echo "     installing neutron for compute node"
echo "==============================================="

# install neutron package
dnf install -y openstack-neutron-openvswitch

# configure neutron.conf
echo "writing neutron configs..."
orig="/etc/neutron/neutron.conf"
save_config
sed -i "/^\[DEFAULT\]/a transport_url \= rabbit://openstack:$RABBIT_PASS@controller:5672\nauth_strategy \= keystone" /etc/neutron/neutron.conf
sed -i "/^\[keystone_authtoken\]/a www_authenticate_uri = http://controller:5000\nauth_url = http://controller:5000\nmemcached_servers = controller:11211\nauth_type = password\nproject_domain_name = Default\nuser_domain_name = Default\nproject_name = service\nusername = neutron\npassword = $NEUTRON_PASS" /etc/neutron/neutron.conf
sed -i "/^\[[oslo_concurrency\]/a lock_path = /var/lib/neutron/tmp" /etc/neutron/neutron.conf

# Configure the Open vSwitch agent¶
orig="/etc/neutron/plugins/ml2/openvswitch_agent.ini"
save_config
sed -i "/^\ovs[\]/a bridge_mappings = provider:$provideriface" /etc/neutron/plugins/ml2/openvswitch_agent.ini
sed -i "/^\[vxlan\]/a local_ip = $overlayip\nl2_population = true" /etc/neutron/plugins/ml2/openvswitch_agent.ini 
sed -i "/^\[securitygroup\]/a enable_security_group = true\nfirewall_driver = openvswitch" /etc/neutron/plugins/ml2/openvswitch_agent.ini

# configure compute to use networking
orig="/etc/nova/nova.conf"
save_config
sed -i "/^\[neutron\]/a auth_url = http://controller:5000\nauth_type = password\nproject_domain_name = Default\nuser_domain_name = Default\nregion_name = RegionOne\nproject_name = service\nusername = neutron\npassword = $NEUTRON_PASS" /etc/nova/nova.conf

# start / restart services
systemctl restart openstack-nova-compute.service
systemctl enable neutron-openvswitch-agent.service
systemctl start neutron-openvswitch-agent.service

sed -i /neutroncomputestat/s/1/0/ resume_status
echo "### neutron install complete ###"
}

swift_controller()
{
# setup controller node for swift object storage
stage="swift controller"

echo "==============================================="
echo "      installing swift controller node"
echo "==============================================="
# create openstack sift user and services
echo "configuring openstack..."
srcopenrc
openstack user create --domain default --password $SWIFT_PASS swift
openstack role add --project service --user swift admin
openstack service create --name swift --description "OpenStack Object Storage" object-store
openstack endpoint create --region RegionOne object-store public http://controller:8080/v1/AUTH_%\(project_id\)s
openstack endpoint create --region RegionOne object-store internal http://controller:8080/v1/AUTH_%\(project_id\)s
openstack endpoint create --region RegionOne object-store admin http://controller:8080/v1

# install and configure components
echo "installing swift packages..."
dnf install -y openstack-swift-proxy python-swiftclient python-keystoneclient python-keystonemiddleware memcached 
curl -o /etc/swift/proxy-server.conf https://opendev.org/openstack/swift/raw/branch/master/etc/proxy-server.conf-sample 

# setup config files
echo "writing swift config..."
sed -i '/^\[DEFAULT\]/,/^\[/{/^[^#|\[]/s/^/#\ /g}' /etc/swift/proxy-server.conf
sed -i "/^\[DEFAULT\]/a bind_port = 8080\nuser = swift\nswift_dir = /etc/swift" /etc/swift/proxy-server.conf
sed -i '/^\[pipeline:main\]/,/^\[/{/^[^#|\[]/s/tempurl/authtoken\ keystoneauth/; /^[^#|\[]/s/tempauth//}' /etc/swift/proxy-server.conf
sed -i -e '/^\[app:proxy-server\]/,/^\[/{/egg:swift#proxy/a account_autocreate = True}' /etc/swift/proxy-server.conf
sed -i -e '/\[filter:keystoneauth\]/s/^#\ //' /etc/swift/proxy-server.conf
sed -i -e '/egg:swift#keystoneauth/{s/^#\ //' -e 'a operator_roles = admin,user}' /etc/swift/proxy-server.conf
sed -i -e '/\[filter:authtoken\]/s/^#\ //' /etc/swift/proxy-server.conf
sed -i -e "/^\[filter:authtoken\]/a paste.filter_factory = keystonemiddleware.auth_token:filter_factory\nwww_authenticate_uri = http://controller:5000\nauth_url = http://controller:5000\nmemcached_servers = controller:11211\nauth_type = password\nproject_domain_id = default\nuser_domain_id = default\nproject_name = service\nusername = swift\npassword = $SWIFT_PASS\n delay_auth_decision = True" /etc/swift/proxy-server.conf
sed -i -e '/^\[filter:cache\]/,/^\[/{/egg:swift#memcache/a memcache_servers = controller:11211}' /etc/swift/proxy-server.conf
firewall-cmd --add-port=8080/tcp --permanent
firewall-cmd --reload


# set resume status
sed -i /swiftctrlstat/s/1/0/ resume_status
echo "### swift install complete ###"
}

swift_node()
{
# install swift object storage on a storage node
stage="swift node"



echo "==============================================="
echo "            installing swift node"
echo "==============================================="
# system setup
echo "installing swift packages..."
dnf install -y xfsprogs rsync

echo "formatting storage..."
mkfs.xfs $storagedev1
mkfs.xfs $storagedev2

mkdir -p /srv/node/store1
mkdir -p /srv/node/store2

echo "writing swift config..."
sdev1uuid=$(blkid | grep $storagedev1 | grep -oE '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}')
sdev2uuid=$(blkid | grep $storagedev2 | grep -oE '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}')
echo "UUID="$sdev1uuid" /srv/node/store1 xfs noatime 0 2" >> /etc/fstab
echo "UUID="$sdev2uuid" /srv/node/store2 xfs noatime 0 2" >> /etc/fstab

echo "uid = swift
gid = swift
log file = /var/log/rsyncd.log
pid file = /var/run/rsyncd.pid
address = $objectsoreip

[account]
max connections = 2
path = /srv/node/
read only = False
lock file = /var/lock/account.lock

[container]
max connections = 2
path = /srv/node/
read only = False
lock file = /var/lock/container.lock

[object]
max connections = 2
path = /srv/node/
read only = False
lock file = /var/lock/object.lock" > /etc/rsyncd.conf

echo "starting service..."
systemctl enable rsyncd.service
systemctl start rsyncd.service

# install and configure openstack compoments
dnf install -y openstack-swift-account openstack-swift-container openstack-swift-object

curl -o /etc/swift/account-server.conf https://opendev.org/openstack/swift/raw/branch/master/etc/account-server.conf-sample
curl -o /etc/swift/container-server.conf https://opendev.org/openstack/swift/raw/branch/master/etc/container-server.conf-sample
curl -o /etc/swift/object-server.conf https://opendev.org/openstack/swift/raw/branch/master/etc/object-server.conf-sample

# account-server.conf file
sed -i -e "/^\[DEFAULT\]/,/^\[/{/bind_ip/a bind_ip = $objectstoreip\nuser = swift\nswift_dir = /etc/swift\ndevices = /srv/node\nmount_check = True}" /etc/swift/account-server.conf
sed -i -e "/^\[pipeline:main\]/,/^\[/{s/backend_ratelimit\ //}" /etc/swift/account-server.conf
sed -i -e "/^\[filter:recon\]/,/^\[/{/egg:swift#recon/a recon_cache_path = /var/cache/swift}" /etc/swift/account-server.conf

# container-server.conf
sed -i -e "/^\[DEFAULT\]/,/^\[/{/bind_port/a bind_ip = $objectstoreip\nuser = swift\nswift_dir = /etc/swift\ndevices = /srv/node\nmount_check = True}" /etc/swift/container-server.conf
sed -i -e "/^\[pipeline:main\]/,/^\[/{s/backend_ratelimit\ //}" /etc/swift/containter-server.conf
sed -i -e "/^\[filter:recon\]/,/^\[/{/egg:swift#recon/a recon_cache_path = /var/cache/swift}" /etc/swift/account-server.conf

# object-server.conf
sed -i -e "/^\[DEFAULT\]/,/^\[/{/bind_port/a bind_ip = $objectstoreip\nuser = swift\nswift_dir = /etc/swift\ndevices = /srv/node\nmount_check = True}" /etc/swift/object-server.conf
sed -i -e "/^\[pipeline:main\]/,/^\[/{s/backend_ratelimit\ //}" /etc/swift/object-server.conf
sed -i -e "/^\[filter:recon\]/,/^\[/{/egg:swift#recon/a recon_cache_path = /var/cache/swift\nrecon_lock_path = /var/lock}" /etc/swift/object-server.conf

# permissions
chown -R swift:swift /srv/node
mkdir -p /var/cache/swift
chown -R root:swift /var/cache/swift
chmod -R 775 /var/cache/swift
firewall-cmd --permanent --add-port=6200/tcp
firewall-cmd --permanent --add-port=6201/tcp
firewall-cmd --permanent --add-port=6202/tcp

sed -i /swiftnodestat/s/1/0/ resume_status
echo "### swift install complete ###"
}

swift_init_rings_node()
{
cd /etc/swift
swift-ring-builder account.builder create 10 3 1
swift-ring-builder account.builder add --region 1 --zone 1 --ip STORAGE_NODE_MANAGEMENT_INTERFACE_IP_ADDRESS --port 6202 \
 --device DEVICE_NAME --weight DEVICE_WEIGHT

echo "### swift init rings install complete ###"
}

heat_controller()
{
echo "heat"

sed -i /heatctrlstat/s/1/0/ resume_status
echo "### swift heat complete ###"
}

controller_archetype()
{ 
echo "+++++++++++++++++++++++++++++++++++++++++++++++"
echo "        installing controler archetype  "
echo "+++++++++++++++++++++++++++++++++++++++++++++++"
# set resume if errors
sed -i /resume/s/0/1/ resume_status
resumeclean=basestat
[ "$resume" == 1 ] && [ "$basestat" == "0" ] && echo "base complete" || base_all 
resumeclean=componentstat
[ "$resume" == 1 ] && [ "$componentstat" == "0" ] && echo "components complete" || components_controller
resumeclean=etcdstat
[ "$resume" == 1 ] && [ "$etcdstat" == "0" ] && echo "etcd complete" || etcd_controller
resumeclean=mariadbstat
[ "$resume" == 1 ] && [ "$mariadbstat" == "0" ] && echo "mariadb complete" || mariadb_controller
resumeclean=rabbitmqstat
[ "$resume" == 1 ] && [ "$rabbitmqstat" == "0" ] && echo "rabbitmq complete" || rabbitmq_controller
resumeclean=memmcachedstat
[ "$resume" == 1 ] && [ "$memcachedstat" == "0" ] && echo "memcached complete" || memcached_controller
resumeclean=keystonestat
[ "$resume" == 1 ] && [ "$keystonestat" == "0" ] && echo "keystone complete" || keystone_controller
resumeclean=glanncestat
[ "$resume" == 1 ] && [ "$glancestat" == "0" ] && echo "glance complete" || glance_controller
resumeclean=placementstat
[ "$resume" == 1 ] && [ "$placementstat" == "0" ] && echo "placement complete" || placement_controller
resumeclean=novastat
[ "$resume" == 1 ] && [ "$novastat" == "0" ] && echo "novactl complete" || nova_controller
resumeclean=cinderstat
[ "$resume" == 1 ] && [ "$cinderstat" == "0" ] && echo "cinderctl complete" || cinder_controller
resumeclean=horizonstat
[ "$resume" == 1 ] && [ "$horizonstat" == "0" ] && echo "horizon complete" || horizon
resumeclean=neutronstat
[ "$resume" == 1 ] && [ "$horizonstat" == "0" ] && echo "neutron complete" || neutron_controller
# reset resume
flush_resume
echo "+++++++++++++++++++++++++++++++++++++++++++++++"
echo "    controler archetype install complete "
echo "+++++++++++++++++++++++++++++++++++++++++++++++"
}

computenode_archetype()
{ 
echo "+++++++++++++++++++++++++++++++++++++++++++++++"
echo "            compute node archetype  "
echo "+++++++++++++++++++++++++++++++++++++++++++++++"
# set resume if errors
sed -i /resume/s/0/1/ resume_status
resumeclean=basestat
[ "$resume" == 1 ] && [ "$basestat" == "0" ] && echo "base complete" || base_all 
resumeclean=componentstat
[ "$resume" == 1 ] && [ "$componentstat" == "0" ] && echo "components complete" || components_node
resumeclean=novastat
[ "$resume" == 1 ] && [ "$novastat" == "0" ] && echo "novactl complete" || nova_compute_node
resumeclean=neutronstat
[ "$resume" == 1 ] && [ "$neutronstat" == "0" ] && echo "neutron complete" || neutron_compute_node
# reset resume
flush_resume
echo "+++++++++++++++++++++++++++++++++++++++++++++++"
echo "   compute node archetype install complete "
echo "+++++++++++++++++++++++++++++++++++++++++++++++"
}

blockstorenode_archetype()
{ 
echo "+++++++++++++++++++++++++++++++++++++++++++++++"
echo "         block storage node archetype  "
echo "+++++++++++++++++++++++++++++++++++++++++++++++"
# set resume if errors
sed -i /resume/s/0/1/ resume_status
resumeclean=basestat
[ "$resume" == 1 ] && [ "$basestat" == "0" ] && echo "base complete" || base_all 
resumeclean=componentstat
[ "$resume" == 1 ] && [ "$componentstat" == "0" ] && echo "components complete" || components_node
resumeclean=cinderstat
[ "$resume" == 1 ] && [ "$cinderstat" == "0" ] && echo "cinder complete" || cinder_node
# reset resume
flush_resume
echo "+++++++++++++++++++++++++++++++++++++++++++++++"
echo "  block storage archetype install complete "
echo "+++++++++++++++++++++++++++++++++++++++++++++++"
}

showips() {
echo "# controller
$controllerip	controller	

# nova compute
$computeip	compute

# cinder block storage
$blockstoreip	blockstore

# swift object storage
$objectstoreip	objectstore"
}

writehosts() {
echo -n "Enter IP for controller node 1 : "
read controllerip
echo -n "Enter IP for compute node 1 : "
read computeip
echo -n "Enter IP for block storage node 1 : "
read blockstoreip
echo -n "Enter IP for object storage node 1 : "
read objectstoreip
echo "===================================================="
echo "           New Hosts Config File       "
echo "===================================================="
echo ""
showips
}

cleanhosts() {
sed -i /controller/d /etc/hosts
sed -i /compute/d /etc/hosts
sed -i /block\ storage/d /etc/hosts
sed -i /blockstore/d /etc/hosts
sed -i /object\ storeage/d /etc/hosts
sed -i /objectstore/d /etc/hosts
}

setvars() {
# what is being installed
echo -n "Which Openstack Release? : "
read release
echo -n "Openstack Node (controller compute block object) : "
read node
echo -n "Set node IPs and optionally write to hosts file? [y/n/x]: "
read hostsfile
case $hostfile in 
		y	)	writehosts ;;
		x	)	exit ;;
		*	)	;;
	esac

}

viewvars() {
# show current variables
echo ""
echo "===================================================="
echo "               Current IP Assignments             "
echo "===================================================="
echo ""
ip addr show | grep -E "^\s+inet\s" | sed 1d
echo ""
echo "===================================================="
echo "             Current Variable Assignments           "
echo "===================================================="
echo ""
awk 'BEGIN {FS="\="; printf "%20s%20s\n", "--Variable--", "--Value--"} /^[a-z]/{printf "%20s%25s\n", $1, $2}' openstack_vars 2>/dev/null | grep -v ^#
echo "*****Time Zone Abbr: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones*****"
echo -n "continue with current values? [y/n/x]: "
read install
case $install in 
		y	)	echo "Continuing installation..." && sleep 1 ;;
		n	)	setvars ;;
		x	)	exit ;;
		*	)	echo "Invalid response" && viewvars	;;
	esac
}

viewpasswords() {
echo "ADMIN_PASS = $ADMIN_PASS"
echo "CINDER_DBPASS = $CINDER_DBPASS"
echo "CINDER_PASS = $CINDER_PASS"
echo "DASH_DBPASS = $DASH_DBPASS"
echo "MYUSER_PASS = $MYUSER_PASS"
echo "GLANCE_DBPASS = $GLANCE_DBPASS"
echo "GLANCE_PASS = $GLANCE_PASS"
echo "KEYSTONE_DBPASS = $KEYSTONE_DBPASS"
echo "METADATA_SECRET = $METADATA_SECRET"
echo "NEUTRON_DBPASS = $NEUTRON_DBPASS"
echo "NEUTRON_PASS = $NEUTRON_PASS"
echo "NOVA_DBPASS = $NOVA_DBPASS"
echo "NOVA_PASS = $NOVA_PASS"
echo "PLACEMENT_PASS = $PLACEMENT_PASS"
echo "PLACEMENT_DBPASS=$PLACEMENT_DBPASS"
echo "RABBIT_PASS = $RABBIT_PASS"
echo "SWIFT_PASS = $SWIFT_PASS"
}

genask() {
echo -n "generate new passwords file? [y/n/x]> "
read gen
case $gen in 
		y	)	generatepasswords ;;
		x	)	exit ;;
		*	)	;;
	esac

}

checkpasswords() {
if [ -e "openstack_passwords" ]; then
	echo "========================================================================="
	echo "NOTE: the openstack_passwords file exists and is automatically included"
	echo "========================================================================="
	echo "NOTE: the openstack_passwords file exists and is automatically included"
else
	echo "NOTE: the openstack_passwords file does not exist"
	echo "Generating openstack_passwords file"
	generatepasswords
	
fi
echo -n "view passwords? [y/n/x]> "
read viewpw
case $viewpw in 
		y	)	viewpasswords; genask ;;
		x	)	exit ;;
		*	)	;;
	esac


}

flush_resume()
{
# reset resume file to zeros
sed -i s/0/1/g resume_status
sed -i /resume/s/1/0/ resume_status
echo "### Resume states reset ###" && sleep 1
}



confirmvars()
{
viewvars
	echo "===================================================="
	echo "            Current Hosts Config File               "
	echo "===================================================="
	echo ""
	cat /etc/hosts
	echo ""
	echo -n "update hosts file? [y/n/x]> "
	read update
	case $update in 
		y	)	cleanhosts && showips >> /etc/hosts && echo "*****/etc/hosts updated*****" ;;
		n	)	echo "*****/etc/hosts NOT updated*****" ;;
		x	)	exit ;;
		*	)	echo "Invalid response" && resume_state	;;
	esac
	checkpasswords

}

resume_state()
{
if [ "$resume" == "1" ]; then
	echo -n "It looks like the last installation didn't complete properly. Would you like to resume where it left off? [y/n/x]"
	read rchoice
	case $rchoice in 
		y	)	echo "Resuming previous installation..." && sleep 1; clean_resume ;;
		n	)	flush_resume; resume=0 ;;
		x	)	exit ;;
		*	)	echo "Invalid response" && resume_state	;;
	esac
else
	confirmvars
fi
}



# default execution
# change to specific directory
dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
cd $dir 
# check for inclusion files
[ -e "openstack_passwords" ] && . openstack_passwords || { echo "openstack_passwords does not exist"; }
[ -e "openstack_vars" ] && . openstack_vars || { echo "openstack_vars does not exist" && exit 1; }
[ -e "resume_status" ] && . resume_status || { echo "resume_status does not exist" && exit 1; }
# startup checks
if [ "$1" ==  "" ]; then
	echo "Designed for CentOS"
	
	#check for internet access
	echo "Checking for internet ..."
	wget -q --spider http://centos.org
	if [ $? != 0 ]; then
		echo "no internet connection"
		exit 1
	fi
	resume_state
	for x in $archetype 
	do
		${x}_archetype
	done
else
	for arg in "$@"
	do
		$arg
	done
fi	

