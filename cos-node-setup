#!/bin/bash


echo "Designed for CentOS"
[ -e "openstack_passwords" ] && . openstack_passwords
[ -e "openstack_vars" ] && . openstack_vars

#check for internet access
echo "Checking for internet ..."
wget -q --spider http://centos.org
if [ $? != 0 ]; then
	echo "no internet connection"
	exit 1
fi

generatepasswords() {
[ -e "openstack_passwords" ] && $(mv openstack_passwords openstack_passwords.bak)
echo "# Database password (no variable used) 
# Root password for the database

" >> openstack_passwords

admin_pass=$(openssl rand -hex 10)
echo "# Password of user admin
ADMIN_PASS=$admin_pass

" >> openstack_passwords

cinder_dbpass=$(openssl rand -hex 10)
echo "# Database password for the Block Storage service
CINDER_DBPASS=$cinder_dbpass

" >> openstack_passwords

cinder_pass=$(openssl rand -hex 10)
echo "# Password of Block Storage service user cinder
CINDER_PASS=$cinder_pass

" >> openstack_passwords

dash_dbpass=$(openssl rand -hex 10)
echo "# Database password for the Dashboard
DASH_DBPASS=$dash_dbpass

" >> openstack_passwords

myuser_pass=$(openssl rand -hex 10)
echo "# Password of user
MYUSER_PASS=$myuser_pass

" >> openstack_passwords

glance_dbpass=$(openssl rand -hex 10)
echo "# Database password for Image service
GLANCE_DBPASS=$glance_dbpass

" >> openstack_passwords

glance_pass=$(openssl rand -hex 10)
echo "# Password of Image service user glance
GLANCE_PASS=$glance_pass

" >> openstack_passwords

keystone_dbpass=$(openssl rand -hex 10)
echo "# Database password of Identity service
KEYSTONE_DBPASS=$keystone_dbpass

" >> openstack_passwords

metadata_secret=$(openssl rand -hex 10)
echo "# Secret for the metadata proxy
METADATA_SECRET=$metadata_secret

" >> openstack_passwords

neutron_dbpass=$(openssl rand -hex 10)
echo "# Database password for the Networking service
NEUTRON_DBPASS=$neutron_dbpass

" >> openstack_passwords

neutron_pass=$(openssl rand -hex 10)
echo "# Password of Networking service user neutron
NEUTRON_PASS=$neutron_pass

" >> openstack_passwords
	
nova_dbpass=$(openssl rand -hex 10)
echo "# Database password for Compute service
NOVA_DBPASS=$nova_dbpass

" >> openstack_passwords

nova_pass=$(openssl rand -hex 10)
echo "# Password of Compute service user nova
NOVA_PASS=$nova_pass" >> openstack_passwords

placement_pass=$(openssl rand -hex 10)
echo "# Password of the Placement service user placement
PLACEMENT_PASS=$placement_pass

" >> openstack_passwords

rabbit_pass=$(openssl rand -hex 10)
echo "# Password of RabbitMQ user openstack
RABBIT_PASS=$rabbit_pass

" >> openstack_passwords
. openstack_passwords
echo "Your passwords are in the file $(pwd)\/openstack_passwords"
}

srcopenrc()
{
#check for admin openrc
if [ -e "admin-openrc" ]; then
	echo "admin-openrc found"
	osadmin=admin-openrc
	sleep 2
else
	echo -n "specify path (y/n) >"
	read specifypath
	if [ "$specifypath" == "y" ]; then  
		echo -n "enter path of admin-openrc or equivalent file > "
		read osadmin
	else
	# Create myuser and openrc auth files
		echo "creating myuser and openrc auth files in the current directory"
		openstack user create myuser
		[ "$?" -gt "0" ] && echo "keystone error, goodbye" && exit 
		[ -e "admin-openrc" ] && $(mv admin-openrc admin-openrc.bak)
		echo "export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=admin
export OS_USERNAME=admin
export OS_PASSWORD=$ADMIN_PASS
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2" > admin-openrc
		echo "**** $(pwd)/admin-openrc created ****"
		[ -e "$myuser-openrc" ] && $(mv $myuser-openrc $myuser-openrc.bak)
		echo "export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=myproject
export OS_USERNAME=$myuser
export OS_PASSWORD=$MYUSER_PASS
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2" > $myuser-openrc
		echo "**** $(pwd)/$myuser-openrc created ****"
		sleep 4
	
	fi
fi
source $osadmin
if [ "$?" -gt "0" ]; then 
	echo "openrc auth error; exit or retry (r/x) > " 
	read retry
	[ "$retry" == "r" ] && srcopenrc || exit
fi

}

base() {
# install base node packages
dnf upgrade -y
dnf install -y dnf-plugins-core
dnf config-manager --set-enabled crb
[ "$?" -gt "0" ] && echo "base error, goodbye" && exit 
dnf upgrade -y
dnf install -y centos-release-openstack-$release
[ "$?" -gt "0" ] && echo "base error, goodbye" && exit 
dnf install -y python3-openstackclient openstack-selinux
[ "$?" -gt "0" ] && echo "base error, goodbye" && exit 
dnf install -y python3-openstackclient openstack-selinux
}

mariadb() {
# Install MariaDB
if [ -n "$(systemctl list-units mariadb.service --state active | grep -o running)" ]; then
	echo "**** $(systemctl list-units mariadb.service --state active | grep running) ****"
else	
	echo "setting up mariadb ..."

	dnf install -y mariadb mariadb-server python3-PyMySQL 
	[ -e "/etc/my.cnf.d/openstack.cnf" ] && $(mv /etc/my.cnf.d/openstack.cnf /etc/my.cnf.d/openstack.bak)
	echo "[mysqld]
bind-address = $controllerip

default-storage-engine = innodb
innodb_file_per_table = on
max_connections = 4096
collation-server = utf8_general_ci
character-set-server = utf8" > /etc/my.cnf.d/openstack.cnf
	systemctl enable --now mariadb.service
	#mysql -e "DELETE FROM mysql.user WHERE User='';"
	#mysql -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';"
	#mysql -e "  MariaDB> DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');"
	[ "$?" -gt "0" ] && echo "mariadb error, goodbye" && exit 
fi
}

rabbitmq() {
# Message Queue - Rabbit MQ
if [ -n "$(systemctl list-units rabbitmq-server.service --state active | grep -o running)" ]; then
	echo "**** $(systemctl list-units rabbitmq-server.service --state active | grep running) ****"
else
	echo "setting up rabbit mq ..."

	dnf install -y rabbitmq-server
	systemctl enable --now rabbitmq-server
	rabbitmqctl add_user openstack $RABBIT_PASS
	rabbitmqctl set_permissions openstack ".*" ".*" ".*"
	[ "$?" -gt "0" ] && echo "rabbit error, goodbye" && exit 

fi
}

memcached() {
# Memcached
if [ -n "$(systemctl list-units memcached.service --state active | grep -o running)" ]; then
	echo "**** $(systemctl list-units memcached.service --state active | grep running) ****"
else
	echo "setting up memcached ..."

	dnf install -y memcached python3-memcached
	sed -i s/'OPTIONS="-l 127.0.0.1,::1"/OPTIONS="-l 127.0.0.1,::1,controller"'/ /etc/sysconfig/memcached
	systemctl enable --now memcached.service
	[ "$?" -gt "0" ] && echo "memcached error, goodbye" && exit 
fi
}

etcd() {
# ETCd
if [ -n "$(systemctl list-units etcd.service --state active | grep -o running)" ]; then
	echo "**** $(systemctl list-units etcd.service --state active | grep running) ****"
else
	echo "setting up ETCd ..."

	dnf install -y etcd
	[ "$?" -gt "0" ] && echo "etcd  error, goodbye" && exit 
	sed -i 's/^[^#]/#/' /etc/etcd/etcd.conf
	[ -z "$controllerip" ] && echo -n "Enter controller ip" && read controllerip
	echo "#[Member]
ETCD_DATA_DIR=\"/var/lib/etcd/default.etcd\"
ETCD_LISTEN_PEER_URLS=\"http://$controllerip:2380\"
ETCD_LISTEN_CLIENT_URLS=\"http://$controllerip:2379\"
ETCD_NAME=\"controller\"
#[Clustering]
ETCD_INITIAL_ADVERTISE_PEER_URLS=\"http://$controllerip:2380\"
ETCD_ADVERTISE_CLIENT_URLS=\"http://$controllerip:2379\"
ETCD_INITIAL_CLUSTER=\"controller=http://$controllerip:2380\"
ETCD_INITIAL_CLUSTER_TOKEN=\"etcd-cluster-01\"
ETCD_INITIAL_CLUSTER_STATE=\"new\"" >> /etc/etcd/etcd.conf
	systemctl enable --now etcd
	[ "$?" -gt "0" ] && echo "ETCd error, goodbye" && exit 
fi
}

keystone() {
# Install Keystone
if [ -f "/etc/httpd/conf.d/wsgi-keystone.conf" ] && [ -n "$(systemctl list-units httpd.service --state active | grep -o running)" ]; then
	echo "**** $(systemctl list-units httpd.service --state active | grep running) for keystone ****"
else
	echo "setting up Keystone ..."

	mysql -e "CREATE DATABASE keystone;"
	mysql -e "GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' \
	IDENTIFIED BY '$KEYSTONE_DBPASS';"
	mysql -e "GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' \
	IDENTIFIED BY '$KEYSTONE_DBPASS';"
	[ "$?" -gt "0" ] && echo "keystone error, goodbye" && exit 
	dnf install -y openstack-keystone httpd mod_wsgi
	[ "$?" -gt "0" ] && echo "keystone error, goodbye" && exit 

	sed -i "/\[database\]/a connection = mysql+pymysql://keystone:$KEYSTONE_DBPASS@controller/keystone" /etc/keystone/keystone.conf
	sed -i '/\^[token\]/a provider = fernet' /etc/keystone/keystone.conf
	su -s /bin/sh -c "keystone-manage db_sync" keystone
	[ "$?" -gt "0" ] && echo "keystone error, goodbye" && exit 
	keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
	keystone-manage credential_setup --keystone-user keystone --keystone-group keystone
	keystone-manage bootstrap --bootstrap-password $ADMIN_PASS \
	  --bootstrap-admin-url http://controller:5000/v3/ \
	  --bootstrap-internal-url http://controller:5000/v3/ \
	  --bootstrap-public-url http://controller:5000/v3/ \
	  --bootstrap-region-id RegionOne
	[ "$?" -gt "0" ] && echo "keystone error, goodbye" && exit 
	sed -i '/\#ServerName/a ServerName controller' /etc/httpd/conf/httpd.conf
	ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/
	systemctl enable --now httpd.service
	[ "$?" -gt "0" ] && echo "keystone error, goodbye" && exit 

	# Set Keystone Environment Variables
	echo "setting up Keystone environment variables ..."
	export OS_USERNAME=admin
	export OS_PASSWORD=$ADMIN_PASS
	export OS_PROJECT_NAME=admin
	export OS_USER_DOMAIN_NAME=Default
	export OS_PROJECT_DOMAIN_NAME=Default
	export OS_AUTH_URL=http://controller:5000/v3
	export OS_IDENTITY_API_VERSION=3
	#get admin-openrc
	srcopenrc
	fi
}

glance() {
# Install Glance
if [ -n "$(systemctl list-units openstack-glance-api.service --state active | grep -o running)" ]; then
	echo "**** $(systemctl list-units openstack-glance-api.service --state active | grep running) ****"
else
	echo "setting up glance"
	mysql -e "CREATE DATABASE glance;"
	mysql -e "GRANT ALL PRIVILEGES ON glance.* TO \'glance'@'localhost\' \
	  IDENTIFIED BY '$GLANCE_DBPASS';"
	mysql -e "GRANT ALL PRIVILEGES ON glance.* TO \'glance'@'%\' \
	  IDENTIFIED BY '$GLANCE_DBPASS';"
	#get admin-openrc
	srcopenrc

	echo "creating glance user ..."
	openstack user create --domain default --password $GLANCE_PASS glance
	openstack project create service
	openstack role add --project service --user glance admin
	[ "$?" -gt "0" ] && echo "glance ueser setup error, goodbye" && exit 
	echo "creating service identity ..."
	openstack service create --name glance --description "OpenStack Image" image
	echo "creating api endpoints"
	openstack endpoint create --region RegionOne image public http://controller:9292
	openstack endpoint create --region RegionOne image internal http://controller:9292
	openstack endpoint create --region RegionOne image admin http://controller:9292
	echo "**** not setting quota limits - see openstack documentation ****"
	# Install & Configure components
	echo "installing glance"
	dnf install -y openstack-glance
	[ "$?" -gt "0" ] && echo "glance install error, goodbye" && exit 
	echo "configuring glance files" 
	sed -i "/^\[database\]/a connection = mysql+pymysql://glance:$GLANCE_DBPASS@controller/glance" /etc/glance/glance-api.conf 
	sed -i "/^\[keystone_authtoken\]/a www_authenticate_uri = http://controller:5000\n\
auth_url = http://controller:5000\n\
memcached_servers = controller:11211\n\
auth_type = password\n\
project_domain_name = Default\n\
user_domain_name = Default\n\
project_name = service\n\
username = glance\n\
password = $GLANCE_PASS" /etc/glance/glance-api.conf
	sed -i '/^\#enabled_backends/a enabled_backends=fs:file' /etc/glance/glance-api.conf
	sed -i '/^\#default_backend/a default_backend = fs' /etc/glance/glance-api.conf
	sed -i 's@\#filesystem_store_datadir@filesystem_store_datadir = /var\/lib\/glance\/images/@' /etc/glance/glance-api.conf
	sed -i "/^\[oslo_limit\]/a www_authenticate_uri = http://controller:5000\nauth_url = http://controller:5000\n\
memcached_servers = controller:11211\n\
auth_type = password\n\
project_domain_name = Default\n\
user_domain_name = Default\n\
project_name = service\nusername = glance\n\
password = $GLANCE_PASS"  /etc/glance/glance-api.conf
#	sed -i "s/GLANCE_PASS/$GLANCE_PASS/g" /etc/glance/glance-api.conf
#	sed -i "s/GLANCE_DBPASS/$GLANCE_DBPASS/g" /etc/glance/glance-api.conf
	echo "setting role permissions"
	openstack role add --user glance --user-domain Default --system all reader
	[ "$?" -gt "0" ] && echo "glance install error, goodbye" && exit 
	echo "populating images"
	su -s /bin/sh -c "glance-manage db_sync" glance
	[ "$?" -gt "0" ] && echo "glance install error, goodbye" && exit 
	echo "starting daemon"
	systemctl enable --now openstack-glance-api.service
	[ "$?" -gt "0" ] && echo "glance install error, goodbye" && exit 
fi
}

placement()
{

mysql -e "CREATE DATABASE placement;"
mysql -e "GRANT ALL PRIVILEGES ON placement.* TO 'placement'@'localhost' \
  IDENTIFIED BY '$PLACEMENT_DBPASS';"
[ "$?" -gt "0" ] && echo "placement install error, goodbye" && exit 
mysql -e "GRANT ALL PRIVILEGES ON placement.* TO 'placement'@'%' \
IDENTIFIED BY '$PLACEMENT_DBPASS';"
[ "$?" -gt "0" ] && echo "placement install error, goodbye" && exit 
srcopenrc
openstack user create --domain default --password $PLACEMENT_PASS placement
openstack role add --project service --user placement admin
openstack service create --name placement --description "Placement API" placement
openstack endpoint create --region RegionOne placement public http://controller:8778
openstack endpoint create --region RegionOne placement internal http://controller:8778
openstack endpoint create --region RegionOne placement admin http://controller:8778
[ "$?" -gt "0" ] && echo "placement install error, goodbye" && exit 
dnf install -y openstack-placement-api

# writing placment config ...
sed -i "/^\[placement_database\]/a connection = mysql+pymysql://keystone:$PLACEMENT_DBPASS@controller/placement" /etc/placement/placement.conf
sed -i "/^\[api\]/a auth_strategy = keystone" /etc/placement/placement.conf
sed -i "/^\[keystone_authtoken\]/a auth_url = http://controller:5000/v3 \n\
memcached_servers = controller:11211 \n\
auth_type = password \n\
project_domain_name = Default \n\
user_domain_name = Default \n\
project_name = service \n\
username = placement \n
password = $PLACEMENT_PASS" /etc/placement/placement.conf

# populating placement database
su -s /bin/sh -c "placement-manage db sync" placement
[ "$?" -gt "0" ] && echo "placement install error, goodbye" && exit 

# restarting server
systemctl restart httpd
[ "$?" -gt "0" ] && echo "placement install error, goodbye" && exit 

}

compute() {
# Install  Nova
mysql -e "CREATE DATABASE nova_api;"
mysql -e "CREATE DATABASE nova;"
mysql -e "CREATE DATABASE nova_cell0;"
mysql -e "GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'localhost' \
  IDENTIFIED BY '$NOVA_DBPASS';"
mysql -e "GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'%' \
  IDENTIFIED BY '$NOVA_DBPASS';"
mysql -e "RANT ALL PRIVILEGES ON nova.* TO 'nova'@'localhost' \
  IDENTIFIED BY '$NOVA_DBPASS';"
mysql -e "GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%' \
  IDENTIFIED BY '$NOVA_DBPASS';"
mysql -e "GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'localhost' \
  IDENTIFIED BY '$NOVA_DBPASS';"
mysql -e "GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'%' \
  IDENTIFIED BY '$NOVA_DBPASS';"
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 

# adding nova user
srcopenrc
openstack user create --domain default --password $NOVA_PASS nova
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 
openstack role add --project service --user nova admin
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 
openstack service create --name nova \
  --description "OpenStack Compute" compute
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 

# creating nova services
openstack service create --name nova --description "OpenStack Compute" compute
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 

# creating nova api endpoints 
openstack endpoint create --region RegionOne compute public http://controller:8774/v2.1
openstack endpoint create --region RegionOne compute internal http://controller:8774/v2.1
openstack endpoint create --region RegionOne compute admin http://controller:8774/v2.1
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 

dnf install -y openstack-nova-api openstack-nova-conductor  openstack-nova-novncproxy openstack-nova-scheduler
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 

sed -i "/^\[DEFAULT\]/a enabled_apis = osapi_compute,metadata \ntransport_url = rabbit://openstack:$RABBIT_PASS@controller:5672/\nmy_ip = $controllerip"  /etc/nova/nova.conf
sed -i "/^\[api_database\]/a connection = mysql+pymysql://nova:$NOVA_DBPASS@controller/nova_api"  /etc/nova/nova.conf
sed -i "/^\[database\]/a connection = mysql+pymysql://nova:$NOVA_DBPASS@controller/nova_api"  /etc/nova/nova.conf
sed -i "/^\[database\]/a connection = mysql+pymysql://nova:$NOVA_DBPASS@controller/nova_api"  /etc/nova/nova.conf
sed -i "/^\[api\]/a \# ...\nauth_strategy = keystone" /etc/nova/nova.conf
sed -i "/^\[keystone_authtoken\]/a # ...\n\
www_authenticate_uri = http://controller:5000/\n\
auth_url = http://controller:5000/\n\
memcached_servers = controller:11211\n\
auth_type = password\n\
project_domain_name = Default\n\
user_domain_name = Default\n\
project_name = service\n\
username = nova\n\
password = $NOVA_PASS" /etc/nova/nova.conf
sed -i "/^\[service_user\]/a send_service_user_token = true\n\
auth_url = https://controller/identity\n\
auth_strategy = keystone\n\
auth_type = password\n\
project_domain_name = Default\n\
project_name = service\n\
user_domain_name = Default\n\
username = nova\n\
password = $NOVA_PASS" /etc/nova/nova.conf
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 
sed -i "/^\[vnc\]/a enabled = true\nserver_listen = $controllerip\nserver_proxyclient_address = $controllerip"
sed -i "/^\[glance\]/a api_servers = http://controller:9292"
sed -i "/^\[oslo_concurrency\]/a lock_path = /var/lib/nova/tmp"
sed -i "/^\[placement\]/a region_name = RegionOne\n\
project_domain_name = Default\n\
project_name = service\n\
auth_type = password\n\
user_domain_name = Default\n\
auth_url = http://controller:5000/v3\n\
username = placement\n\
password = $PLACEMENT_PASS" /etc/nova/nova.conf
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 
sed -i "/^\[scheduler\]/a discover_hosts_in_cells_interval = 300"

# populate nova-api db
su -s /bin/sh -c "nova-manage api_db sync" nova
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 
su -s /bin/sh -c "nova-manage cell_v2 map_cell0" nova
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 
su -s /bin/sh -c "nova-manage cell_v2 create_cell --name=cell1 --verbose" nova
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 
su -s /bin/sh -c "nova-manage db sync" nova
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 
su -s /bin/sh -c "nova-manage cell_v2 list_cells" nova
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 

# enable services
systemctl enable \
openstack-nova-api.service \
openstack-nova-scheduler.service \
openstack-nova-conductor.service \
openstack-nova-novncproxy.service
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 
# start services
systemctl start \
openstack-nova-api.service \
openstack-nova-scheduler.service \
openstack-nova-conductor.service \
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 
}

novanode()
{
# install nova
dnf install -y openstack-nova-compute

# write configs
sed -i "/^\[DEFAULT\]/a enabled_apis = osapi_compute,metadata \ntransport_url = rabbit://openstack:$RABBIT_PASS@controller:5672/\nmy_ip = $controllerip"  /etc/nova/nova.conf
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 
sed -i "/^\[api\]/a \# ...\nauth_strategy = keystone" /etc/nova/nova.conf
sed -i "/^\[keystone_authtoken\]/a www_authenticate_uri = http://controller:5000/\n\
auth_url = http://controller:5000/\n\
memcached_servers = controller:11211\n\
auth_type = password\n\
project_domain_name = Default\n\
user_domain_name = Default\n\
project_name = service\n\
username = nova\n\
password = $NOVA_PASS" /etc/nova/nova.conf
sed -i "/^\[service_user\]/a send_service_user_token = true\n\
auth_url = https://controller/identity\n\
auth_strategy = keystone\n\
auth_type = password\n\
project_domain_name = Default\n\
project_name = service\n\
user_domain_name = Default\n\
username = nova\n\
password = $NOVA_PASS" /etc/nova/nova.conf
sed -i "/^\[vnc\]/a enabled = true\nserver_listen = 0.0.0.0\nserver_proxyclient_address = $computeip\nnovncproxy_base_url = http://controller:6080/vnc_auto.html"
sed -i "/^\[glance\]/a api_servers = http://controller:9292"
sed -i "/^\[oslo_concurrency\]/a lock_path = /var/lib/nova/tmp"
sed -i "/^\[placement\]/a region_name = RegionOne\n\
project_domain_name = Default\n\
project_name = service\n\
auth_type = password\n\
user_domain_name = Default\n\
auth_url = http://controller:5000/v3\n\
username = placement\n\
password = $PLACEMENT_PASS" /etc/nova/nova.conf
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 

# finalize installation

if [ "$(egrep -c '(vmx|svm)' /proc/cpuinfo)" ]; then
	echo "this machine supports hardware acceleration\nnova configuration complete"
else
	sed -i "/^\[libvirt\]/a qemu"
	echo "this machine does not support hardware acceleration\nusing quemu\nova configuration complete"
fi

# set services up
systemctl enable libvirtd.service openstack-nova-compute.service
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 
systemctl start libvirtd.service openstack-nova-compute.service
[ "$?" -gt "0" ] && echo "nova install error, goodbye" && exit 

echo "nova compute (node) set up; run the following to discover hosts manually on the controller node\nsu -s /bin/sh -c \"nova-manage cell_v2 discover_hosts --verbose\" nova"
}

cinderctl()
{
# database setup
mysql -e "CREATE DATABASE cinder;"
mysql -e "GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'localhost' IDENTIFIED BY '$CINDER_DBPASS';"
mysql -e "GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'%' IDENTIFIED BY 'CINDER_DBPASS';"

# openstack setup
openstack user create --domain default --password-prompt cinder
openstack role add --project service --user cinder admin
openstack service create --name cinderv3 --description "OpenStack Block Storage" volumev3
openstack endpoint create --region RegionOne volumev3 public http://controller:8776/v3/%\(project_id\)s
openstack endpoint create --region RegionOne volumev3 internal http://controller:8776/v3/%\(project_id\)s
openstack endpoint create --region RegionOne volumev3 admin http://controller:8776/v3/%\(project_id\)s

# install and write config files
dnf install -y openstack-cinder

sed -i "/^\[database\]/a connection = mysql+pymysql://cinder:$CINDER_DBPASS@controller/cinder" /etc/cinder/cinder.conf
sed -i "/^\[DEFAULT\]/a transport_url = rabbit://openstack:$RABBIT_PASS@controller\n\auth_strategy = keystone\n\my_ip = $controllerip" /etc/cinder/cinder.conf
sed -i "/^\[keystone_authtoken\]/a www_authenticate_uri = http://controller:5000\n\
auth_url = http://controller:5000\n\
memcached_servers = controller:11211\n\
auth_type = password\n\
project_domain_name = default\n\
user_domain_name = default\n\
project_name = service\n\
username = cinder\n\
password = $CINDER_PASS" /etc/cinder/cinder.conf
sed -i "/^\[[oslo_concurrency\]/a lock_path = /var/lib/cinder/tmp" /etc/cinder/cinder.conf
sed -i "/^\[cinder\]/a os_region_name = RegionOne" /etc/nova/nova.conf

# populate database
su -s /bin/sh -c "cinder-manage db sync" cinder

# start services
systemctl restart openstack-nova-api.service
systemctl enable openstack-cinder-api.service openstack-cinder-scheduler.service
systemctl start openstack-cinder-api.service openstack-cinder-scheduler.service
}

cindernode()
{



}

cinderbackup()
{
dnf install -y openstack-cinder

srcopenrd
SWIFT_URL=$(openstack catalog show object-store | grep -o -E 'http[s]?://[^ ]+' | sed -n '1p')
sed -i "/^\[DEFAULT\]/a backup_driver = cinder.backup.drivers.swift.SwiftBackupDriver\n\backup_swift_url = $SWIFT_URLl" /etc/nova/nova.conf

# start services
systemctl enable openstack-cinder-backup.service
systemctl start openstack-cinder-backup.service
}

horizon()
{

}


controller() {
mariadb
rabbitmq
memcached
etcd
keystone
glance
placement
novactl

}

showips() {
echo "# controller
$controllerip	controller	

# compute
$computeip	compute

# block storage
$blockstoreip	blockstore

# object storage
$objectstoreip	objectstore"
}

writehosts() {
echo -n "Enter IP for controller node I : "
read controllerip
echo -n "Enter IP for compute node 1 : "
read computeip
echo -n "Enter IP for block storage node 1 : "
read blockstorageip
echo -n "Enter IP for object storage node 1 : "
read objectstoreip
showips
}

cleanhosts() {
sed -i /controller/d /etc/hosts
sed -i /compute/d /etc/hosts
sed -i /block\ storage/d /etc/hosts
sed -i /blockstore/d /etc/hosts
sed -i /object\ storeage/d /etc/hosts
sed -i /objectstore/d /etc/hosts
}

setvars() {
# what is being installed
echo -n "Which Openstack Release? : "
read release
echo -n "Openstack Node (controller compute block object) : "
read node
echo -n "Set node IPs and optionally write to hosts file? y/n : "
read hostsfile
[ "$hostsfile" == "y" ] && writehosts
}

viewvars() {
# test for empty variables
echo "current IP assignments"
ip addr show | grep inet
echo "openstack release to install=$release"
echo "node to install=$node"
echo "myuser=$myuser"
echo "controller node IP=$controllerip"
echo "compute node IP=$computeip"
echo "block storage node IP=$blockstoreip"
echo "object storage IP=$objectstoreip"
echo -n "continue with current values? : "
read install
[ "$?" -gt "0" ] && exit 
[ "$install" == "n" ] && setvars 
}

viewpasswords() {
echo "ADMIN_PASS = $ADMIN_PASS"
echo "CINDER_DBPASS = $CINDER_DBPASS"
echo "CINDER_PASS = $CINDER_PASS"
echo "DASH_DBPASS = $DASH_DBPASS"
echo "MYUSER_PASS = $MYUSER_PASS"
echo "GLANCE_DBPASS = $GLANCE_DBPASS"
echo "GLANCE_PASS = $GLANCE_PASS"
echo "KEYSTONE_DBPASS = $KEYSTONE_DBPASS"
echo "METADATA_SECRET = $METADATA_SECRET"
echo "NEUTRON_DBPASS = $NEUTRON_DBPASS"
echo "NEUTRON_PASS = $NEUTRON_PASS"
echo "NOVA_DBPASS = $NOVA_DBPASS"
echo "NOVA_PASS = $NOVA_PASS"
echo "PLACEMENT_PASS = $PLACEMENT_PASS"
echo "RABBIT_PASS = $RABBIT_PASS"
genask
checkpasswords
}

genask() {
echo -n "generate new passwords file? (y/n)> "
read gen
[ "$gen" == "y" ] && generatepasswords
}

checkpasswords() {
if [ -e "openstack_passwords" ]; then
	echo "NOTE: the openstack_passwords file exists and is automatically included"
else
	echo "NOTE: the openstack_passwords file does not exist"
	echo "Generating openstack_passwords file"
	generatepasswords
	
fi
echo -n "view passwords? (y/n)> "
	read viewpw
	[ "$viewpw" == "y" ] && viewpasswords

}

viewvars
echo "*** current /etc/hosts file ***"
cat /etc/hosts
echo -n "update hosts file? (y/n)> "
read update
[ "$update" == "y" ] && cleanhosts && showips >> /etc/hosts && echo "/etc/hosts updated" || echo "/etc/hosts NOT updated"
[ "$?" -gt "0" ] && exit 
checkpasswords
echo "setting up base packages..."
sleep 1
base
[ "$?" -gt "0" ] && echo "node error, goodbye" && exit || echo "setting up $node packages..."
sleep 1
$node
[ "$?" -gt "0" ] || echo "success!"
