#!/bin/bash


echo "Designed for CentOS"
[ -e "openstack_passwords" ] && . openstack_passwords
[ -e "openstack_vars" ] && . openstack_vars

#check for internet access
echo "Checking for internet ..."
wget -q --spider http://centos.org
if [ $? != 0 ]; then
	echo "no internet connection"
	exit 1
fi

generatepasswords() {
[ -e "openstack_passwords" ] && $(mv openstack_passwords openstack_passwords.bak)
echo "# Database password (no variable used) 
# Root password for the database

" >> openstack_passwords

admin_pass=$(openssl rand -hex 10)
echo "# Password of user admin
ADMIN_PASS=$admin_pass

" >> openstack_passwords

cinder_dbpass=$(openssl rand -hex 10)
echo "# Database password for the Block Storage service
CINDER_DBPASS=$cinder_dbpass

" >> openstack_passwords

cinder_pass=$(openssl rand -hex 10)
echo "# Password of Block Storage service user cinder
CINDER_PASS=$cinder_pass

" >> openstack_passwords

dash_dbpass=$(openssl rand -hex 10)
echo "# Database password for the Dashboard
DASH_DBPASS=$dash_dbpass

" >> openstack_passwords

demo_pass=$(openssl rand -hex 10)
echo "# Password of user demo
DEMO_PASS=$demo_pass

" >> openstack_passwords

glance_dbpass=$(openssl rand -hex 10)
echo "# Database password for Image service
GLANCE_DBPASS=$glance_dbpass

" >> openstack_passwords

glance_pass=$(openssl rand -hex 10)
echo "# Password of Image service user glance
GLANCE_PASS=$glance_pass

" >> openstack_passwords

keystone_dbpass=$(openssl rand -hex 10)
echo "# Database password of Identity service
KEYSTONE_DBPASS=$keystone_dbpass

" >> openstack_passwords

metadata_secret=$(openssl rand -hex 10)
echo "# Secret for the metadata proxy
METADATA_SECRET=$metadata_secret

" >> openstack_passwords

neutron_dbpass=$(openssl rand -hex 10)
echo "# Database password for the Networking service
NEUTRON_DBPASS=$neutron_dbpass

" >> openstack_passwords

neutron_pass=$(openssl rand -hex 10)
echo "# Password of Networking service user neutron
NEUTRON_PASS=$neutron_pass

" >> openstack_passwords
	
nova_dbpass=$(openssl rand -hex 10)
echo "# Database password for Compute service
NOVA_DBPASS=$nova_dbpass

" >> openstack_passwords

nova_pass=$(openssl rand -hex 10)
echo "# Password of Compute service user nova
NOVA_PASS=$nova_pass" >> openstack_passwords

placement_pass=$(openssl rand -hex 10)
echo "# Password of the Placement service user placement
PLACEMENT_PASS=$placement_pass

" >> openstack_passwords

rabbit_pass=$(openssl rand -hex 10)
echo "# Password of RabbitMQ user openstack
RABBIT_PASS=$rabbit_pass

" >> openstack_passwords

echo "Your passwords are in the file $(pwd)\/openstack_passwords"
}

base() {
# install base node packages
dnf upgrade -y
dnf install -y dnf-plugins-core
dnf config-manager --set-enabled crb
[ "$?" -gt "0" ] && echo "base error, goodbye" && exit 
dnf upgrade -y
dnf install -y centos-release-openstack-$release
[ "$?" -gt "0" ] && echo "base error, goodbye" && exit 
dnf install -y python3-openstackclient openstack-selinux
[ "$?" -gt "0" ] && echo "base error, goodbye" && exit 
dnf install -y python3-openstackclient openstack-selinux
}

controller() {

# Install MariaDB
if [ -n "$(systemctl list-units mariadb.service --state active | grep -o running)" ]; then
	echo "$(systemctl list-units mariadb.service --state active | grep running)"
else	
	echo "setting up mariadb ..."

	dnf install -y mariadb mariadb-server python3-PyMySQL 
	[ -e "/etc/my.cnf.d/openstack.cnf" ] && $(mv /etc/my.cnf.d/openstack.cnf /etc/my.cnf.d/openstack.bak)
	echo "[mysqld]
	bind-address = 10.0.0.11

	default-storage-engine = innodb
	innodb_file_per_table = on
	max_connections = 4096
	collation-server = utf8_general_ci
	character-set-server = utf8" > /etc/my.cnf.d/openstack.cnf
	systemctl enable --now mariadb.service
	mysql_secure_installation
	[ "$?" -gt "0" ] && echo "mariadb error, goodbye" && exit 
fi

# Message Queue - Rabbit MQ
if [ -n "$(systemctl list-units rabbitmq-server.service --state active | grep -o running)" ]; then
	echo "$(systemctl list-units rabbitmq-server.service --state active | grep running)"
else
	echo "setting up rabbit mq ..."

	dnf install -y rabbitmq-server
	systemctl enable --now rabbitmq-server
	rabbitmqctl add_user openstack $RABBIT_PASS
	rabbitmqctl set_permissions openstack ".*" ".*" ".*"
	[ "$?" -gt "0" ] && echo "rabbit error, goodbye" && exit 

fi

# Memcached
if [ -n "$(systemctl list-units memcached.service --state active | grep -o running)" ]; then
	echo "$(systemctl list-units memcached.service --state active | grep running)"
else
	echo "setting up memcached ..."

	dnf install -y memcached python3-memcached
	sed s/'OPTIONS="-l 127.0.0.1,::1"/OPTIONS="-l 127.0.0.1,::1,controller"'/ /etc/sysconfig/memcached
	systemctl enable --now memcached.service
	[ "$?" -gt "0" ] && echo "memcached error, goodbye" && exit 
fi

# ETCd
if [ -n "$(systemctl list-units etcd.service --state active | grep -o running)" ]; then
	echo "$(systemctl list-units etcd.service --state active | grep running)"
else
	echo "setting up ETCd ..."

	dnf install -y etcd
	[ "$?" -gt "0" ] && echo "etcd  error, goodbye" && exit 
	sed -i 's/^[^#]/#/' /etc/etcd/etcd.conf
	[ -z "$controllerip" ] && echo -n "Enter controller ip" && read controllerip
	echo "#[Member]
ETCD_DATA_DIR=\"/var/lib/etcd/default.etcd\"
ETCD_LISTEN_PEER_URLS=\"http://$controllerip:2380\"
ETCD_LISTEN_CLIENT_URLS=\"http://$controllerip:2379\"
ETCD_NAME=\"controller\"
#[Clustering]
ETCD_INITIAL_ADVERTISE_PEER_URLS=\"http://$controllerip:2380\"
ETCD_ADVERTISE_CLIENT_URLS=\"http://$controllerip:2379\"
ETCD_INITIAL_CLUSTER=\"controller=http://$controllerip:2380\"
ETCD_INITIAL_CLUSTER_TOKEN=\"etcd-cluster-01\"
ETCD_INITIAL_CLUSTER_STATE=\"new\"" >> /etc/etcd/etcd.conf
	systemctl enable --now etcd
	[ "$?" -gt "0" ] && echo "ETCd error, goodbye" && exit 
fi

# Install Keystone
if [ -f "/etc/httpd/conf.d/wsgi-keystone.conf" ] && [ -n "$(systemctl list-units httpd.service --state active | grep -o running)" ]; then
	echo "$(systemctl list-units httpd.service --state active | grep running) for keystone"
else
	echo "setting up Keystone ..."

	mysql -e "CREATE DATABASE keystone;"
	mysql -e "GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' \
	IDENTIFIED BY 'KEYSTONE_DBPASS';"
	mysql -e "GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' \
	IDENTIFIED BY 'KEYSTONE_DBPASS';"
	[ "$?" -gt "0" ] && echo "keystone error, goodbye" && exit 
	dnf install -y openstack-keystone httpd mod_wsgi
	[ "$?" -gt "0" ] && echo "keystone error, goodbye" && exit 

	sed -i '/\[database\]/a connection = mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone' /etc/keystone/keystone.conf
	sed -i '/\[token\]/a provider = fernet' /etc/keystone/keystone.conf
	su -s /bin/sh -c "keystone-manage db_sync" keystone
	keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
	keystone-manage credential_setup --keystone-user keystone --keystone-group keystone
	keystone-manage bootstrap --bootstrap-password ADMIN_PASS \
	  --bootstrap-admin-url http://controller:5000/v3/ \
	  --bootstrap-internal-url http://controller:5000/v3/ \
	  --bootstrap-public-url http://controller:5000/v3/ \
	  --bootstrap-region-id RegionOne
	sed -i '/\#ServerName/a ServerName controller' /etc/httpd/conf/httpd.conf
	ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/
	systemctl enable --now httpd.service
	[ "$?" -gt "0" ] && echo "keystone error, goodbye" && exit 

	# Set Keystone Environment Variables
	echo "setting up Keystone environment variables ..."
	export OS_USERNAME=admin
	export OS_PASSWORD=ADMIN_PASS
	export OS_PROJECT_NAME=admin
	export OS_USER_DOMAIN_NAME=Default
	export OS_PROJECT_DOMAIN_NAME=Default
	export OS_AUTH_URL=http://controller:5000/v3
	export OS_IDENTITY_API_VERSION=3

	# Create openrc auth files
	echo "creating openrc auth files for admin and demo in the current directory"
	echo "export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=admin
export OS_USERNAME=admin
export OS_PASSWORD=ADMIN_PASS
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2" > admin-openrc
	echo "$(pwd)/admin-openrc created"
	echo "export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=myproject
export OS_USERNAME=myuser
export OS_PASSWORD=DEMO_PASS
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2" > demo-openrc
	echo "$(pwd)/demo-openrc created"
	sleep 4
fi

# Install Glance
if [ -n "$(systemctl list-units openstack-glance-api.service --state active | grep -o running)" ]; then
	echo "$(systemctl list-units openstack-glance-api.service --state active | grep running)"
else
	echo "setting up glance"
	mysql -e "CREATE DATABASE glance;"
	mysql -e "GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' \
	  IDENTIFIED BY '$GLANCE_DBPASS';"
	mysql -e "GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' \
	  IDENTIFIED BY '$GLANCE_DBPASS';"
	#check for admin openrc
	if [ -e "admin-openrc" ]; then
		echo "admin-openrc found"
		source admin-openrc 
	else
		echo -n "enter path of admin-openrc or equivalent  file > "
		read osadmin
		source $osadmin
		[ "$?" -gt "0" ] && echo "openrc auth error, goodbye" && exit 
	fi
		
	echo "creating glance user ..."
	openstack user create --domain default --password $GLANCE_PASS glance
	openstack role add --project service --user glance admin
	[ "$?" -gt "0" ] && echo "glance ueser setup error, goodbye" && exit 
	echo "creating service identity ..."
	openstack service create --name glance --description "OpenStack Image" image
	echo "creating api endpoints"
	openstack endpoint create --region RegionOne image public http://controller:9292
	openstack endpoint create --region RegionOne image internal http://controller:9292
	openstack endpoint create --region RegionOne image admin http://controller:9292
	echo "not setting quota limits - see openstack documentation"
	# Install & Configure components
	echo "installing glance"
	dnf install -y openstack-glance
	[ "$?" -gt "0" ] && echo "glance install error, goodbye" && exit 

	echo "configuring glance files"
	sed -i '/^\[database\]/a connection = mysql+pymysql://glance:$GLANCE_DBPASS@controller/glance' /etc/glance/glance-api.conf
	sed -i '/^\[keystone_authtoken\]/a www_authenticate_uri  = http://controller:5000
auth_url = http://controller:5000
memcached_servers = controller:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = glance
password = $GLANCE_PASS' /etc/glance-api-conf
	sed -i '/^\#enabled_backends/a enabled_backends=fs:file' /etc/glance/glance-api.conf
	sed -i '/^\#default_backend/a default_backend\ =\ fs' /etc/glance/glance-api.conf
	sed -i 's@\#filesystem_store_datadir@filesystem_store_datadir = /var\/lib\/glance\/images\//@' /etc/glance/glance-api.conf
	sed -i '/^\[oslo_limit\]/a auth_url = http://controller:5000
auth_type = password
user_domain_id = default
username = glance
system_scope = all
password = $GLANCE_PASS
endpoint_id = 340be3625e9b4239a6415d034e98aace
region_name = RegionOne' /etc/glance/glance-api.conf
	echo "setting role permissions"
	openstack role add --user glance --user-domain Default --system all reader
	[ "$?" -gt "0" ] && echo "glance install error, goodbye" && exit 
	echo "populating images"
	su -s /bin/sh -c "glance-manage db_sync" glance
	[ "$?" -gt "0" ] && echo "glance install error, goodbye" && exit 
	echo "starting daemon"
	systemctl enable --now openstack-glance-api.service
	[ "$?" -gt "0" ] && echo "glance install error, goodbye" && exit 
fi

}


compute() {
# Install  Nova
mysql -e "CREATE DATABASE nova_api;"
mysql -e "CREATE DATABASE nova;"
mysql -e "CREATE DATABASE nova_cell0;"
mysql -e "GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'localhost' \
  IDENTIFIED BY '$NOVA_DBPASS';"
mysql -e "GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'%' \
  IDENTIFIED BY '$NOVA_DBPASS';"
mysql -e "RANT ALL PRIVILEGES ON nova.* TO 'nova'@'localhost' \
  IDENTIFIED BY '$NOVA_DBPASS';"
mysql -e "GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%' \
  IDENTIFIED BY '$NOVA_DBPASS';"
mysql -e "GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'localhost' \
  IDENTIFIED BY '$NOVA_DBPASS';"
mysql -e "GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'%' \
  IDENTIFIED BY '$NOVA_DBPASS';"
}

showips() {
echo "# controller
$controllerip	controller	

# compute
$computeip	compute

# block storage
$blockstoreip	blockstore

# object storage
$objectstoreip	objectstore"
}

writehosts() {
echo -n "Enter IP for controller node I : "
read controllerip
echo -n "Enter IP for compute node 1 : "
read computeip
echo -n "Enter IP for block storage node 1 : "
read blockstorageip
echo -n "Enter IP for object storage node 1 : "
read objectstoreip
showips
echo -n "Append to hosts file? (y/n) : "
read append
[ "$append" == "y" ] && showips >> /etc/hosts && echo "/etc/hosts updated" || echo "/etc/hosts NOT updated"
}

setvars() {
# what is being installed
echo -n "Which Openstack Release? : "
read release
echo -n "Openstack Node (controller compute block object) : "
read node
echo -n "Set node IPs and optionally write to hosts file? y/n : "
read hostsfile
[ "$hostsfile" == "y" ] && writehosts
}

viewvars() {
# test for empty variables
echo "current IP assignments"
ip addr show | grep inet
echo "openstack release to install=$release"
echo "node to install=$node"
echo "controller node IP=$controllerip"
echo "compute node IP=$computeip"
echo "block storage node IP=$blockstoreip"
echo "object storage IP=$objectstoreip"
echo -n "continue with current values? : "
read install
[ "$install" == "n" ] && setvars 
}

[ -e "openstack_passwords" ] && echo "NOTE: the openstack_passwords file exists and is automatically included"
echo -n "generate passwords file? (y/n)"
read gen
[ "$gen" == "y" ] && generatepasswords

viewvars
echo "setting up base packages..."
sleep 1
base
[ "$?" -gt "0" ] && echo "node error, goodbye" && exit || echo "setting up $node packages..."
sleep 1
$node

[ "$?" -gt "0" ] || echo "success!"
